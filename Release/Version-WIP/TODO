See Also: design/new-features-and-additions.txt
TODO
    Version-1.2
	. Version-1.2 Feature Complete
		. compile into .a instead of .so
		. ../../Base/Examples/1_Yak
		  remove workaround in string_util.c so that we can implement StringFinish as
		  it should be - see s_cmp() in include/traverse.h. Right now if we check
		  the string mode in StringFinish then Yak crashes
			=> reimplement schemeFrame() in ../../Base/Examples/1_Yak/scheme.c
	. Version-1.2 Engineering Complete
		. Pass design/story/single-thread.story
		. create ternary-operated expressions proper test case(s)
		. update ./design/specs/bm-read-narrative-states.txt
		  include guidelines on flags rules & precedence
		. software architecture document (package dependency diagram)
		. Reorganize Examples, e.g.
			. Examples-v1.0
				. 0_TuringMachine
			. Examples-v1.1
				. 0_TuringMachine
				. 1_Schematize
			. Examples-v1.2
				. 0_TuringMachine.0
				. 0_TuringMachine.1 // using new FFI
				. 0_TuringMachine.single
				. 1_Schematize.0
				. 1_Schematize.1 // only Yak, using new FFI
		. README.txt
		. NOTE: everything is Pair, starting from [address,value]
		. need feature-list.txt / Release Notes
		. DOCUMENT
			. literal %% internally converts as (%,%) - error in current documentation
			. instantiation may do half a job - since we do not pre-check with bm_void()
	. Release Version-1.2

    Version-2.0
	. on_event_ext
		. need to separate expression from source
			on expression < source
		  simplest is to replace occurrence with Pair
	. traversal.c
		. Handle %? when %< is set - including special case: %(%?:...)
		. ESUB(this,e,ndx) \
			( e->sub[0]==this  ? NULL : ( e->sub[!ndx] ? e->sub[ndx] : NULL ))
		. Attention: bm_context_mark, when %< is set...
	. Where to put bm_hear, bm_sound, bm_take ????
		=> could have connection.c ???
	. Release Version-2.0
		. Examples-v2.0
			. 0_TuringMachine.single
			. 0_TuringMachine.head-tape
			. 0_TuringMachine.head-tape-cell
			. 0_TuringMaching.head-cell-reporter << to be written
			. 1_Schematize	// using Scheme
			. 1_Yak.0 // support Scheme files from schematize
			. 1_Yak.1 // using new Cell design
			. 2_interactive	// TBD

NICE TO HAVE
	. do_input / do_output multiple args support
	  Issue: what formalism? - e.g. could be
		do { arg1, arg2, ..., argN } : "format" <
		do > "format" : { arg1, arg2, ..., argN }
	. bm_instantiate() - should it invoke bm_void() or not ?
		. Pros: instantiate all or nothing
		. Cons: performances
		. Alternative:
		  1. propose special execution mode (like Debug)
		  2. special do - e.g. do$ - where bm_void() is enabled
	  Current status & Decision
		. bm_instantiate() does not invoke bm_void()
		  => bm_instantiate() may do half a job (user responsibility)
	. parser.c
		. more & better error messages
		. extract bm_parser_report from parser.c => error.c ?
		. integrate 'caught' in CNParserData => all flags
	. Design document: formalize the internal data structures, e.g.
		cell:[ entry:[ name, narratives:{} ], ctx:[ this, registry ] ]
	. move btreefy from ../../Base to ../../Base/Examples/
	. allow more to be done in INI files (e.g. assignment) ?
		. Now the whole bm_instantiate() syntax is accessible
		. and will need it later in new Cell constructor
	. native support for DOT'd expressions
		. would simplify story.c / parser.c for one thing
		  requires access to narrative identifier instance - currently
		  stored as '%' in context (?)
		. could also postprocess expression in story.c
	. per proto:expression <<< where proto can be '?' or narrative-type proto
		. PER/ELSE_PER
		. also DO_PER, e.g.
			do per ?:expression
				: var : %?
		  => only ONE occurrence->data->expression?
	. multi-threading (pthreads)
	. restore DEBUG mode in freeCNDB() and db_update() - cf. Version-1.1

DONE
	. Tidied up do_input() / do_output() as well as bm_inputf() and bm_outputf()
		. NOTE: deprecated access to db_output() outside of db_outputf()
	. bm_input()
		. Decision: we do not change bm_input() behavior on EOF, which
		  consists of doing ~(*,input) - and not : input : ~.
		  CAVEAT: if no input is read prior to EOF, no event is generated.
		  (which I suppose is why even empty files generate \n prior to EOF)
	. Version-1.2 new features implementation
		. term~					(signal)
		. var : value				(assignment)
		. var : ~.				(un-assignment)
		. in/on ~.: expression			(anti-occurrence)
		. in/on/do ( expr ? expr : expr ) 	(ternary-operated expression)
		. do ((expr,...):sequence:)		(list/ellipsis)
	. Implemented consistent usage of flags across all C-traversals
                . instantiate.c		bm_instantiate()
					bm_void()
                . query.c		verify()
                . deternarize.c		deternarize()
                . locate.c		bm_locate_pivot()
					bm_scour()
					bm_locate_param()
	. Design consistent usage of flags across all C-traversals
		. See ./design/specs/bm-TRAVERSE-design.txt
			. Events: '{', etc.
			. Usage: where C-traversal happens
			. Template - and flags
		. use only ONE set of flags consistently
			. use p_prune( PRUNE_LITERAL, p ) everywhere
	. deternarize integration:
		. ternary-operated expressions supported in all cases except
		  input from external sources (including INI files)
		. bm_parse(): no longer flags deternarized expressions as MARKED
		. deternarize() handle the whole B% syntax (e.g. characters, etc.)
		. ./design/specs/bm-TERNARY-implementation.txt finalized
		  Note: ternary operations are only supported in mode==CN_STORY
	. Code restructuring
		. parser.c re-enabled ternary in DO-type - not only SUB_EXPR
		. traversal.c renamed as feel.c
		. bm_instantiate() and bm_void() extracted from expression.c
		  	=> [ NEW ] instantiate.c
			=> [ NEW ] p_prune( PRUNE_LITERAL, p )
		. deternarize.c [ NEW ]
		. database.c: deprecated db_couple() - along with bm_substantiate()
		. expression.c: deprecated bm_substantiate()
			. Now bm_read() calls bm_instantiate(), which integrates
			  support for bm_literal() - could be used anywhere
			. untested: instantiation events during 'on init'
		. traversal.c: ternary support in xp_verify() & bm_verify() undone
			. expression is assumed to be deternarized
	. bm_locate_mark() now returns mark exponent even if expression is negated
	  	as it may be negated twice, esp. after deternarize()
	. Added ../../Base/Examples/5_Ternarize [ NEW ]
		. ternarize.c
		. deternarize.c
		. Cleaned up ../../Base/Examples/3_Segmentize
			. free_segmentized() corrected
	. ternary-operated expressions - see bm-TERNARY-implementation.txt
		. parser.c	- bm_parse()
		. string_util.c - p_prune( PRUNE_TERNARY, p )
		. locate.c	- bm_locate_pivot(), xp_target(), bm_locate_param()
	. [ UNDONE ] traversal.c - ternary operator support
		. updated bm_verify() to invoke p_ternary( p ) etc.
		. updated xp_verify() to handle INFORMED ?
		. handle N-ary cases e.g.
			( expr ? expr ? expr : expr : expr )
			( expr ?: expr ?: expr ? expr :)
	. parser.c - ternary operator support
	 	. see bm-TERNARY-implementation.txt
	. Restored Version-WIP backward compatibility w/ Version-1.1
	  sub-narrative execution
		. bm_operation.c: implemented operation registries & warden
		. parser.c : lift "base-narrative-only" EN/ELSE_EN restriction
		. context.c:
			. bm_context_set() / bm_context_clear() implementation
			. restore bm_lookup & bm_register functionality including
			  ALL ctx->registry variables
		. operate()
			. restore LOCALE support
			. restore EN/ELSE_EN support
		. pass ./B% -f Test/yak.ini Test/yak
	. Parser optimization: if ( data->opt ) goto EXPR_BGN
		and: set data->opt in _expr; clear it in expr_
	. Restore sub-narratives, EN, LOCALE, and do .expression commands as per
	  Version-1.1 in parser.c - cf ./design/specs/bm-sub-narrative-EN-association.txt
		. sub-narrative proto format is
			.identifier:( expression1 )
			:( expression1 ) // pre-processed as .this:( expression1 )
		. LOCALE are declarations
			.var1 .var2 .... .varN
		. EN / ELSE_EN are statements in the form
			%( expression2 )
			else %( expression2 )
		  these statements enable execution of all sub-narratives verifying
		  "proto:statement" - i.e. ( expression1 ):%( expression2 )
		. do .expression commands are translated at readStory() time into
			do ( identifier, expression )
		  where identifier is the one specified in the current narrative proto
		  Note that do .expression commands from the main narrative translate
		  as do (this,expression) instantiating the base entity named "this"
	. string_util.c - ternary operator support
		. p_prune( PRUNE_TERNARY, p ), p_ternary( p )
		. updated p_prune( type, p) so that
		  with (new) type==PRUNE_TERNARY,
			when called on opening '(' in ( expr ? expr : expr ),
				returns on appropriate '?' [level==1] if there is
		   with type==PRUNE_TERM or type==PRUNE_FILTER
				when called past '(' in ( expr ? expr : expr ),
				returns on appropriate '?' or ':' or ')'
	. parser.c 	-> rewritten
		. deprecated filterable() : replaced using COMPOUND flag
		. implemented SIGNAL interface in file format: do signal~
		. use one stack for all
		. use flags instead of level (LEVEL) and stack.level (SET)
		. support (: ) in DO expressions
		. allow \cr to act as ',' in { }
		. db_io.c eliminated - db_output() back to database.c
		. bm_read(), in story.c, supercedes previous cnLoad() and db_input()
	. narrative.c
		. readStory rewritten separating cmd and expr
		. transport typelse as part of type
		. complete rewrite / CNParser
		. changed CNOccurrence from [type,data:[expression,sub]] to [data:[type,expression],sub]
		. Allow base mark in condition/event expressions
		. Do not allow negated base mark - except "on ~( ... ? ... )"
		. Story = Registry vs. listItem
		. Deprecated sub-narrative File Format Interface
	. db_op.c
		. db_init() / db_exit() / db_in() / db_out()
		. db_update() resets nil->sub[0] to NULL
	. operation.c
		. invoke bm_context_mark(), in locate.c
		. do_input => unhacked
	. locate.c [ NEW ]
		. was part of context.c and traversal.c before
		. added bm_context_mark()
	. traversal.c / new BMContext definition
		. changed xp_init, bm_feel, bm_traverse, xp_traverse
		. returns CNInstance *found
		. no more bm_push_mark()
		. bm_locate becomes bm_locate_pivot, now in locate.c
	. context.c
		. BMContext:[ db, registry ] becomes [ this, registry ]
		. extracted locate functions -> locate.c
	. program.c / program.h [ NEW ]
		. db_init() done after new cells made active, and updated
		  once for TO_BE_MANIFESTED to become MANIFESTED
	. Base/{list.c,registry.c,string_util.c}
		=> include <stdint.h>
		=> create pop_item() in list.c
	. database.c
		. implemented db_signal() db_coupled() db_uncouple()
		. simplified freeCNDB() using cn_prune()
		. db_couple() : no longer allow concurrent reassignments
		. implemented db_outputf( FILE *, format, ... ) using db_output()
		  used in e.g. db_instantiate() - and elsewhere...
	. registry.c, btree.c, string_util.c, etc.
		=> used proper casting - see BUG from Rob Kedoin
		+  introduced pop_item()
	. cache.h => integrated into pair.c
		=> removed cache.c cache.h
		=> everything derives from Pair


