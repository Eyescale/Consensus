See Also: design/new-features-and-additions.txt
TODO
    Version-2.0
	. on_event_ext
		. need to separate expression from source
			on expression < source
		  simplest is to replace occurrence with Pair
	. traversal.c
		. Handle %? when %< is set - including special case: %(%?:...)
		. ESUB(this,e,ndx) \
			( e->sub[0]==this  ? NULL : ( e->sub[!ndx] ? e->sub[ndx] : NULL ))
		. Attention: bm_context_mark, when %< is set...
	. Where to put bm_hear, bm_sound, bm_take ????
		=> could have connection.c ???
	. Pass design/story/{all}
	. Remodel occurrence->data->expression from char * to TBD
	. Release Version-2.0
		. Examples-v2.0
			. 0_TuringMachine
			. 1_Schematize
			. .../TM.single
			. .../TM.head-tape
			. .../TM.head-tape-cell
			. .../TM.head-cell-reporter << to be written
		. Additonal examples
			. yak using new Cell design (and literals)
			. interactive // TBD
ON-GOING
    Version-1.2 Documentation
	     Release Documents
		. instantiation may do half a job - since we do not pre-check with bm_void()
		. feature-list.txt / Release Notes / README.txt, etc.
	     Announce / Version-2.0
		. NOTE: everything is Pair, starting from [address,value]

NICE TO HAVE
	. extract btreefication from traverse.c
		. btree can be transported as part of occurrence
	. code cleanup
		. replace all the for ( ; ; ) with the model found
	  	  in Base/Examples/6_BTreefy/btree.c
	. parser.c
		. more & better error messages
		. extract bm_parser_report from parser.c => error.c ?
		. integrate 'caught' in CNParserData => all flags
	. do_input / do_output multiple args support
	  Issue: what formalism? - e.g. could be
		do < arg1, arg2, ..., argN > : "format" <
		do > "format" : < arg1, arg2, ..., argN >
	. bm_void() - should bm_instantiate() verify expression?
		. Pros: instantiate all or nothing
		. Cons: performances
		. Alternative:
		  1. propose special execution mode (like Debug)
		  2. special do - e.g. do$ - where bm_void() is enabled
	  Current status & Decision
		. bm_instantiate() does not invoke bm_void()
		  => bm_instantiate() may do half a job (user responsibility)
	. Design document: formalize the internal data structures, e.g.
		cell:[ entry:[ name, narratives:{} ], ctx:[ this, registry ] ]
	. extract btreefy from ../../Base to ../../Base/Examples/
		. write ../../Base/Examples/Z_Btreefy example
	. allow more to be done in INI files (e.g. assignment) ?
		. Now the whole bm_instantiate() syntax is accessible
		. and will need it later in new Cell constructor
	. per proto:expression <<< where proto can be '?' or narrative-type proto
		. PER/ELSE_PER
		. also DO_PER, e.g.
			do per ?:expression
				: var : %?
		  => only ONE occurrence->data->expression?
	. multi-threading (pthreads)
	. restore DEBUG mode in freeCNDB() and db_update() - cf. Version-1.1

DONE
	. rewrote Base/Examples/6_BTreefy
		. Now integrating in Version-1.2: bm_traverse() uses btree
		  Benefits:
			. no more p_ternary() p_filtered() p_single()
			. _prune() optimized
