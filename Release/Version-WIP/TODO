See Also: design/story/interactive.story

TODO
	. extend *^?:sub to return
	  EITHER - if %?:sub is an assignee in the current assignment occurrence
		the assigned value of %?:sub in the current assignment buffer
	  OR - if %?:sub is not an assignee in the current assignment occurrence
		%?:sub itself
	. cosystem init: create (.,(Status,.)) and clear guard Stati
	  implement and test example
	. NTH: now that we keep list of shared entities in context
		=> bm_query() could parse them in no pivot case
	. NTH: parser_macros: extract REENTER + put caught in io struct
	. NTH: allow %list and |^list in OUTPUT, FORE, etc.
		just cannot be used in DO and ON and PER
	. NTH: parser post-processing -> identify/eliminate undue filters

DONE
	. System init spec - see design/story/interactive.story
	. upgraded Test/09_pipe to %|:sub instead of %(%|:sub) <<< deprecated
	. bugfix operation.c:do_enable() cf. Test/48_string
	. REVISION 2.2: deprecated %(_) => use en _
	. removed Test/47_do-ellipsis - file was garbage (?)
	. fprint_output: air-space output vector - cf Test/64_tag-use-cases
	. errout.c: centralized error messages
	. RESTRICTION: .%tag must be declared before use, either as .%tag <_>
	  or .%tag so that it can be registered into ctx from expression
	  - otherwise e.g. in %( titi ? toto|^tag : tutu ) would register
	  tag from deternarized string, which will be freed
	     => allow several on the same line (declaration only)
	     => error if tag used and not declared (run-time)
	  cf. Test/64_tag-use-cases
	. implemented .%tag expressions
		.%tag	// declaration and registration
		.%tag  <_> // inform tag, e.g.: .%tag <ON,OFF>
		.%tag  { expression(^.)|^.~, ... } // foreach, |^.~ => clip
		.%tag~ { expression(^.)|^., ... } // while pop |^. => save
		.%tag~ // flush and deregistration
	  RESTRICTIONS
		%list and ^list cannot be both in the same expression
		neither %tag nor ^tag can be used inside of expression
		^. only allowed in *type&LOCALE and is_f(SET) - ie.
			.%tag{_} or .%tag~{_} above
	  cf. Test/63_tag-list-op
	. implemented %list and |^list and |^list~
	  RESTRICTION:
		%list and ^list cannot be both in the same expression
	  => traversal.h: %list => RegisterVariableCB
			DONE	locate_pivot.c:	register_variable_CB
			DONE	instantiate.c:	register_variable_CB
			DONE	eeno_query.c:	match_CB => bm_match()
			DONE	query.c:	match_CB => bm_match()
	  => traversal.h: |^list and |^list~ => BgnPipeCB
			DONE	query.c: using filter_CB
	. registry.h: renamed IndexedByCharacter into IndexedByNameRef
	. eeno_query.c: renamed bm_proxy_scan into bm_eeno_scan
	. allow %?:sub and %!:sub when *type&DO and !byref
		=> allows e.g. %?:(.,?) without %(%?:(.,?)) in these cases
		=> is PROTECTED: cannot be filtered nor used as ternary guard
	  cf. Test/53_output-system-launch-formula [updated]
	  cf. Test/61_instantiate-rvsub
	. allow _< ?:{_} // cf. parser.c and eeno_query.c: bm_eeno_scan()
	. extracted bm_parse_eenov, bm_parse_char, bm_parse_regex, bm_parse_seq
	  from parser.c - Note:
	  	~.?	not allowed
		~.:	must be written verbatim (no space)
		~.(	must be written verbatim (no space)
		?:...	must be written verbatim (no space)
		~..	no longer allowed => use ~(..)
		~.identifier	no longer allowed => user ~(.identifier)
	. RE-REVISION 2.2: using %|:sub instead of %|^sub - more understandable
	. implemented %(_)^ use case, as per design/story/interactive.story
	  => instantiate.c: collect_CB uses bm_list_inform() which first tests
	     results via bm_intake so as to set data->newborn.current flag
	. p_prune( PRUNE_TERM, p ) now returns on '^' if follows ')'
	. p_prune( PRUNE_LEVEL, p ) / integrated in prune.c / handles '^'
	. bm_traverse(): handles '^' use cases:
		*^	=> *^^	& DereferenceCB alt. p++ to ^^
			   *^? 	& DereferenceCB alt. p++ to ^?
		^.	=> INFORMED & RegisterVariableCB alt. p+=2; set INFORMED
		^^	=> INFORMED & RegisterVariableCB alt. p+=2; set INFORMED
		^?	=> following *
		)^	=> INFORMED & NewBornCB / p++ past )^
		|^	=> BgnPipeCB alt. skip |^_~
	. parser: (_)^ PROTECTED => cannot be followed by ':' nor be ternary guard
	. deternarize no longer optimizes any of ?:(_)(_) or !^:(_)(_) or (_)^
		=> parser.c: does not allow ternary in FORE
		=> deternarize.c: does not optimize if )(_) or )^
	. bugfix ?:(_){_} => traversal.h
		. on )(_) skip to the last closing parenthesis - for !^:(_)(_)
		. bugfix markscan - for ?:(_)(_) and ?:(_){_}
		  on (_) or {_} when BASE and INFORMED => traverse_data->done = 1
		  allows markscan / bm_query() to return after FORE
	  cf Test/56_Loop
	. bm_arena_flush() and freeArena() invoke cn_prune vs. cn_release
	. implemented EEVA as %<.> - we do not implement EENOC in this release
		=> parser.c: %<.> RESTRICTED to ( *type&IN || is_f(SUB_EXPR) )
		=> locate_pivot.c: ignore %<.>
		=> eenov.c: implemented eeva( CNInstance *, CNDB * )
	  cf. Test/60_EEVA
	. NOTE: strings are not authorized in inifile as we may not have a story
	  at that stage.
	. Story Arena
		. retype arena into e.g. [ string, ube ]
		. cache sub-narrative string in n->root->data->expression
		. register shared entities in context's "$" entry
		. implement cell-out and bm_arena_flush()
	. bm_arena_register: manifest new instantiated entities
	. string sub-narratives
		cf. Test/59_string-sub-narrative
	  Note: ultimately strings will be allocated in B% process arena,
		- and replaced in narrative occurrences with their addresses -
		so that testing will not involve strcmp()
	. on ~(_?_) < %% is allowed (as EENO)
		=> %<?> resp %<!> could be deprecated
		=> must verify when instantiating EENOV and %< is %%
		=> DONE: cf. cell.c:bm_inform()
	. Shared entities comparison/translation/transposition [DONE]
		database.c: outputf - DBIdentifier(e)
			    db_match => bm_arena_compare()
		cell.c: bm_inform => bm_arena_transpose()
			bm_intake => bm_arena_translate()
		eenov.c: identifier_CB => db_match_identifier( x, p )
		context.c: bm_match => db_match_identifier( x, p )
	. re-fixed "?:" in eeno_query => using wildcard_CB to skip "?:"
	. moved bm_inform() and bm_intake() from context.c to cell.c
	. NOTE: do :_:!! |{ here %| is *^^, not the whole set of UBE's }
	. implement ^^ and *^^ and *^?:sub (including *^?)
	  in instantiate.c: inform_carry and inform_UBE, we do
		registryRegister( ctx, "*^", (Registry *) buffer );
		for ( ... ) { // where current is entry in buffer
			registryRegister( ctx, "^^", (Pair *) current ); }
	  in include/traversal.h, we associate
		^^  			=> CB_RegisterVariableCB
		*^^ / *^?:(_) / *^?	=> CB_DereferenceCB
	  *^_ is only authorized as term in the actionable part of DO expressions
		instantiate_traversal	=> collect_CB // DONE: bm_scan()
	      where
		*^?:sub = bufferized value of %(%?:sub) (including *^?)
		DONE: bm_scan() now invokes bm_context_lookup() to extract value
	  ^^ is queryable => wherever BMRegisterVariableCB is defined, that is:
		eeno_feel_traversal.h		N/A
		instantiate_traversal.h		register_variable_CB // DONE: default
		locate_pivot_traversal.h	register_variable_CB // DONE: EYEYE
		query_traversal.h		match_CB // DONE: lookup_rv()
	  Test ^^ *^^ and *^? *^?:(_)
		cf Test/58_EYEYE-ube
	. unrestricted ^^ - aka. EYEYE: generally means: current assignee
	. instantiate.c: on "}|)," handle sub[ NDX ]==NULL
		that is: pipe_bgn_CB, close_CB, end_set_CB, decouple_CB
		=> no more _return( 2 ) but instead pruning levels
		   with possibility to recover from NULL results
	. redefined _prune( take ) as _prune( take, p )
	. BUGFIX: context.c: mark_sub() only applies mark's exponent's subs
		=> '?' requires %(_) arround starred expression
	. p_prune( PRUNE_TERM ) returns on '|' => using _prune( BM_PRUNE_LEVEL )
	. implement per expression
	. implement ?:(_)(_) and ?:(_){_} and !?:(_)(_) and !?:(_){_}
		=> cf. design/specs/bm-TRAVERSE-loop.txt
		+ Test: cf. Test/56_loop
	. BUGIX locate_pivot.c => now using not_CB
		Note that in traversal.h NEGATED only applies
		to term - i.e. is NOT passed inside (_)
	. redesigned context.c:bm_mark() and operation.c interface
	. implemented (_)^
		. database.h => db_has_newborn( listItem *, CNDB * );
		. instantiate.c:case_( wildcard_CB )
		. traversal.h: case '!' => CB_WildCardCB
		. Testing: cf Test/55-bingo_bonga
		  implemented !^:(_)(_) - so that
			newborn_authorized => instantiate 1st (_)
			otherwise => instantiate 2nd (_)
	. icast stuff moved to Base/pair.h
	. fprint_expr completed - test cases
		./B% -p Test/50_carry-piped
		./B% -p Test/51_output-cosystem
		./B% -p Test/52_output-carry
		./B% -p Test/53_output-system-launch-formula
		./B% -p Test/54_pipe-hell [narrative.c: enable TEST_PIPE]
		./B% -p Examples/4_Yak/yak.bm
		./B% -f Examples/4_Yak/Schemes/calculator -p
	. parser.c
		. allow \n after '|'
		. allow ^^ - aka. EYEYE
		  UNRESTRICTED - generally means current assignee => can be NULL
		. allow *^^ and *^?:sub - including *^? in DO mode
		  RESTRICTED to PIPED|CARRY and !(INFORMED|byref)
		. (_)^ - restricted to s_at(')') and LEVEL and !byref in DO mode
		  Note: byref now includes condition FOR
		  Note: not specific to PIPED|CARRY - as !?:(_)_ isn't
		. allow ?:(_) and ?:(_){_} and !?:(_)(_) and !?:(_){_} in DO mode
		  RESTRICTED to either s_at('|') or !(LEVEL|INFORMED|byref)
		  Note: not restricted to PIPED|CARRY - as could be in SET
		. Note: pipe usage RESTRICTED to LEVEL|SET|CARRY
	. allow B% to printout inifile, e.g.
		 ./B% -f Examples/4_Yak/Schemes/calculator -p
	. output: | and |{ and !!carry(...) => \n and level++
		 cf Test/51_output-system Test/52_output-carry
	. implement do { a|b } and carry( a|b )
		 => calling PipeEndCB on , } and carry )
		 cf Test/50_carry-piped
	. shared entities & shared arenas
		. retyped base entities into ( NULL, entry )
		. cell.c: bm_cell_update( cell, story )
		. context.c: bm_context_update( ctx, story )
		. db_op.c: db_update( db, parent, arena )
		. [NEW] arena.c / arena.h <= story.c, instantiate.c
		. instantiate.c: assign_string()
		. database.c: db_output()
		. instantiate.c: assign_new() => bufferized
		. UBE implemented: !! | ...
	. removed PMARK case handling in locate_pivot.c and query.c
	. REVISION-2.2: no longer authorize e.g. %(%|:(.,?))
	  as %| is nascent and, in case of carry, pertains to child context
		=> use %|^(.,?) instead	[NEW]
	  furthermore, we only allow %| when PIPED is set and we are not in
	  a dereferencing expression
		cf. design/specs/bm-PARSE-implementation.txt
	. term_CB no longer used in instantiate_traversal and eeno_feel_traversal
	  => Warning issued at run-time - using filter_CB - in cases
		do _:expression
		on/per _:expression < @@@
	. BUGFIX eenov.c / data->success now initialized
	. declared all inline as static since we compile in library
	. instantiate.c: restored literal_CB
	. traverse.c: fixed NEGATED flag mishandling => no more f_cls
	. instantiate.c, eeno_feel.c: optimized term_CB
		cf. include/traversal.h: is_filtered(term)
	. strings implementation - parser.c // cf. Test/48_string
		do "_"
		do : variable : "_"
		: "_"
	  Note: we only allow base-level instantiation and sub-narrative
	  definition, so we don't have to handle "_" in traverse.c
	. revised design/story/interactive.story: no more [_] and '&' stuff
	. removed #ifdef UNIFIED from this version - this is here to stay
	. redefined CNStory type to [ Registry *narratives, Registry *arena ]
	. interactive - basic, see cell.c:bm_read_command()
		. support user input "do expression" => execute action
		. cnSync() except on do >_ output commands or err
		. support graceful exit via "do exit" or ^D (EOF)
		  NOTE: The Main in Examples/3_TM-multi/TM-head_cell.story
		  exits on init => ^D or "do exit" will do nothing, as
		  other cells are running. "/" however does cut.
		  Examples/2_TM-single/TM-single.story has only one cell.
	  Example:
		./B% -i
		> do toto
		> do >:.
		{ %%, toto }
		> ^D
	  Note: do ~(.) also releases %% - actually it's a FEATURE (!), as
	 	do %% will rehabilitate %%, which was released - but not removed
	. extended main.c to support
		./B% -i
		./B% file.bm -i
		./B% -f file.ini -i
		./B% -f file.ini file.bm -i
	. parser.c/story.c:
		. separated bm_parse_expr and bm_parse_cmd
		. separated readStory() and bm_read()
	. extracted [NEW] story.c/story.h from narrative.c/narrative.h
	. updated design/specs/bm-Main.txt - add About interactive section
	. program.c: cleaned up cnSync()/cnUpdate()
		cf. design/specs/bm-Main.txt
	. branched Version-2.1

OPEN ISSUES
	. do :< a, b >: ({1,2},3)
		=> wrong order of assignment
	. TBD: query.c: non-pivot case: shared entities not traversed
		=> bug or feature?

NICE TO HAVE
	. NTH: do "occurrence" | ...
		requires own stringRegister/stringLookup in bm_arena_register()
		as we only want to compare what is inside "_"
	. NTH: byref vs. BYREF (traversal flag of its own)
	       issue: major compatibility breach
	. query, scan, feel, etc. could take &p as argument, so that
	       on return we have p = post-expression
	. replace ... with …
	. extend do :_:_ | ... to ALL assignment operations, supporting
		^^ = current assignee / *^^ = current value
		?:(_)(_) and ?:(_){_} and ?!:_ and _^
		*^?:sub = bufferized value of %(%?:sub) (including *^?)
	. OPT: assignment: should use expression=Pair *
	. interactive - advanced / as per bm-Main.txt#interactive
	  1. import frame narrative (for execution only)
		allowing to bundle multiple do actions
	     would use bm_parse_cmd and read_CB instead of bm_parse_ui
		> in .
			_ <<<< bm_parse_cmd takes over
	     => user must enter tabs (?) (except first one)
	     => user must enter done to execute
	  2. import narrative or narrative sections (for registration and execution)
	     => use Main if existing + insert sub-root => output:
		:
		#!<sr>
			code from interactive
		#!</>
			original code
	     Options:
	     . name sub-root => enable/disable sections dynamically
	     . can also disable original code dynamically
	  3. set breakpoint
		using sub-narrative (?)
	. assignment could use %% instead of '*'
	. make %(_) mandatory condition to use filters in do expressions
	  e.g. do ( a:b, c ) generates error, vs. do ( %(a:b), c )
	  pro: no need to check filtered in bm_instantiate traversal, nor
	       in bm_parse/actionable
	  con: makes instantiation expressions possibly a bit heavier

	. B%-struct: about reading / executing commands
		supposedly also about typedef (mostly on Remarkable)
	. NTH: see design/specs/bm-LITERAL.txt ( ..., <a,b,c> ) etc.
	. dpu-drive.story
		: mem (variable assignment & usage in formulas)
	. do { _ }	<<<< ANY expression - assignment, release, etc.
	. finish variable stack - might answer issue below
		1. in .::expression << check we don't have (*,.) >> %. ?
		2. possibly implement .locale: expression (?)
	  issue: Yak: investigate (: %term :), (:\(%term\):) kinda race condition
	. Implement
		in .:expression	// e.g. in .:: OUT
			=> rebase perso for locale definition
			=> %. new registry variable
			=> now perso should be %[ perso, registry ]
		and any identifier lookup may go through the whole stack of registries
		Requirement
			expression:~( *, . )
		Example
			in .:: state	// pushes [ perso, registry ] where perso=%.:((*,%%),state)
				.locale	// instantiates ( %., locale )
		Benefit
		. locale will be released automatically on state changes
	. .locale: expression // initialization - use cases to be determined
		on ~.				// == inactive
		    =>	on/per ~. < src		// src can be determined
	. OPT: occurrence meta-characters ?:~ => ExpressionTake post-processing
		meaning, per Term: Ternary, Filtered, Unmarked, Coupled
	. parser.c / narrative.c
		NarrativeTake: on empty narrative: return Warning and just ignore
		ProtoSet: set errnum on double-def / already registered
	. locale variables: only on 'in_' and then attached to %?
	. do : var : %?	when %? is NULL
		=> should it be equivalent to do : var : ~.
		=> currently assignment fails
	. support per condition
		complements per event < %%
		but then we'd want to allow variable names in condition
	. allow !! inside of expression instead of assignment only
		requires changes in parser.c and instantiate.c
	. ( a, b, c, ... ) translates into ((( a, b ), c ), ... )
	. extend do !!identifier( ) to do !!expression( )
	. Other EEnoRV as-is
		on ~( %<_> )
		on %<_> < .
		do !! Narrative( %<_> )
	. improve >>>> B%%: Error / Warning handling - vs. exit(-1) or repeat
	. parser.c
		. more & better error messages
		. extract bm_parser_report from parser.c => error.c ?
	. support multiple args in do input
		do < arg1, arg2, ..., argN > : "format" <
	. Design document: formalize the internal data structures, e.g.
		cell:[ [ entry:[ name, narratives:{} ], carry ], ctx:[ this, registry ] ]
	. optimization
		. Remodel occurrence->data->expression from char * to TBD
		. do_enable: without building string?
	. bm_void() - should bm_instantiate() verify expression?
		. Pros: instantiate all or nothing
		. Cons: performances
		. Alternative:
		  1. propose special execution mode (like Debug)
		  2. special do - e.g. do$ - where bm_void() is enforced
	  Current status & Decision
		. bm_instantiate() does not invoke bm_void()
		  => bm_instantiate() may do half a job (user responsibility)
	. multi-threading (pthreads)
	. restore DEBUG mode in freeCNDB() and db_update() - cf. Version-1.1

TODOC
	. %identifier' in literal or list MUST be followed by non-separator
	. write Consensus B% Version-2.0 Programming Guide
		. Reminder: instantiation may do half a job, as
		  we do not pre-check with bm_void
	. update Consensus B% Version-1.x programming guide to
		  include Version-1.2 features - as Addendum (?)
	. Version-2.0 Announcement
		. Next Step: Version-2.1 (now Version-WIP)
		  building up on 1_Schematize/yak.new example
	. Version-2.0 README.txt - document output changes
		. multiple output format supported - with vector
			e.g. do >"%s%s":<*alpha,*beta>
		. default format ("%_") appends '\n' to the resulting output
			e.g. do >: expression
			  or do >:< expression(s) >
		. format %s allows single quote to be used without requiring
		  the corresponding SCE to be instantiated
			e.g do >"%s\n":'h'	// will always work
	. CAVEAT: in Version-2.0 implementation (db_op.c)
		signals as newborn entities become to-be-released => immediately visible
		whereas released entities cannot become signals => not repeatable
	    whereas
		in Version-WIP entities can be both newborn and to-be-released, these
		entities being born as released; furthermore, released entities can be
		reborn as released, using the new combination (e,nil) x ((nil,e),nil)
	. CAVEAT: tricky usage of ~ esp. in EENO
		e.g. on ?:~toto < src
		does not mean that anything other than toto will pass
		it means that anything matching *what the caller has*
		other than toto will pass -- note that in this case we
		do not have pivot, and that the expression, since it is
		negated, will be dereferenced first in the caller
		in other words: ~instance does not mean "not this instance",
		but the set of instances other than this instance in the CNDB
		Therefore it has to be dereferenced in the caller's CNDB first,
		as EENO are external *event* occurrences, and are not supposed to
		give access to the contents of the external CNDB
	. CAVEAT: DBFirst() DBNext() do not traverse proxy.as_sub[0]^n
		=> These instances will not be found in Version-2.0 when the
		   query expression is non-pivotable
		=> Not a problem in Version-2.1 (currently WIP) as these will
		   only be created as DB_SIGNAL_OP

