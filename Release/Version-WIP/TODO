See Also: design/new-features-and-additions.txt
TODO
	. per event
		easy - as bm_feel() and bm_proxy_feel() don't use pivot -
		to return a list instead of a single CNInstance *
		=> redefine BM_CONDITION, BM_INSTANTIATED and BM_RELEASED

			BM_EVENT	1
			BM_VISIBLE	2
			BM_TYPE		3
			BM_AS_PER	4

			BM_CONDITION	BM_VISIBLE
			BM_INSTANTIATED	BM_VISIBLE|BM_EVENT
			BM_RELEASED	BM_EVENT

		can test (type&BM_TYPE) and (type&BM_AS_PER)

	  TODO:
	  1. just listItem * and type redefinition
	  2. extend bm_operate() -> do { } while();

	. Publish %@
		. Test on Maths/add rewrite
	. Maths
		. Add, Mult, Sub, Div
		. Mem
		. Yak integration (full interactive calculator)
	. Release/Version-WIP/Examples/4_Yak
		. supporting B% Grammar as example
		. with interactive traversal

DONE
	. support vector assignment - e.g.
		do :< a, b, c >:< 1, 2, 3 >
	. allowed %% in Â¶
	. extended do identifier~ in case identifier is not base entity
	  (i.e. identifier is sub-narrative param or locale), so that
		  identifier's subs get deprecated if
			these are not referenced elsewhere
		  	these are not base entities
	  further extended to allow
		do %?~
		do %!~
	  cf. Test/33_untrace and Examples/4_Yak/yak.story
	. implement en for enable, so that the two following commands are equivalent
		en expression
		%( expression )
	. support ellipsis at any level in proto, e.g.
		:( .return:(( %%, .server ), .request:(.func,...) ), ... )
		   e.g.	-------------------------------------^-------^

	  => context.c: param_CB is called on any .identifier p
		if p_prune(PRUNE_TERM,p) verifies ",..." then
			. ignore exponent
			. set param to instances.sub[0]^MAX
	  CAVEATS
	  1. as we do not [yet] support e.g. %(( a, ? ), ... ) we only support
	     inner ( .param, ... ) and/or terminating ellipsis in proto
	  2. when proto is ellipsis-terminated, then the sub-narrative perso
	     is changed to (%%,this) - consequently all .locale(s) will be
	     instantiated as ((%%,this), locale(s)), etc.
	. do (( expression, ... ), < expression(s) > )
	. %((?,...):expression) represents ALL expression.sub[0]^n (n>=0)
	  starting from expression itself
		so for expression: (func,...)
			we have func:
				%((?,...):expression):~(.,.)
			and params:
				%(func,?):%((?,...):expression)
				%((func,.),?):%((?,...):expression)
				%(((func,.),.),?):%((?,...):expression)
				%((((func,.),.),.),?):%((?,...):expression)
	. do (( list, ... ), xpan )
		instantiates xpan if needed, then
		instantiates ((((list,a),b),...),z) where xpan is {a,b,...,z}
	. implemented db_fire_proxy( proxy, db )
		. called in bm_context_update() before db_update()
		. performs db_op( DB_SIGNAL_OP, e, db ) on all e:(proxy,.)
	. db_proxy() no longer manifests new proxies [rev-2.0]
		<=> proxy instantiation does not trigger any event
	. do >: expression // appends '\n' to the resulting output [rev-2.0]
	. %<(expression)> done, using ! as pivot in expression, e.g.
		on (%%,.) < ?
			do >: %<(!,?:...)>
	  	does output all newly instantiated %((%%,.),?:...) in %<
	. %( list, ?:... ) implementation done
	  representing ALL %((list,...),?,?,?,...) - cf. Test/23_list-exp
	. REV-2.0 ASSIGNMENT rules
	  in/on : variable : value [ < src ]
		  %? (resp.%<?>) represents whatever is marked in expression
		  %! (resp.%<!>) ALWAYS represents the whole expression: ((*,.),.)
	  e.g. in/on : variable : value < ?
		  %<?> same as %< - but w/o mark neither %<?> nor %<!> are informed
		  %<!> same as %<!:((*,variable),value)>
	  Test/script for all assignment cases
	. REV-2.0 SIGNAL handling
	  identifier~ only supported during INSTANTIATION
	  on signal~ < src
		should therefore become on ~( signal ) < src
		otherwise generate ERROR
	  cf. ./Examples/3_TM.multi/TM_head-cell.story
	. Branched Version-2.0

NICE TO HAVE
	. verify_traversal optimization
		in pivot.p=='%(' and pivot.e==current xp_traverse'd (?)
		but actually we do have a pivot.e inside LIST_EXPR (?)
	. CLEANUP
		. p_prune( ) use strmatch( "asd", event ) in default
		  Actually I would like default to cover all the terminal cases
	. ( a, b, c, ... ) translates into ((( a, b ), c ), ... )
	. en ~%(.,?):~%(?,.)	== %(^$) == en ^$
		~%(?,.)		== %(^.) == en ^.
		~%(.,?)		== %(.$) == en .$
	. instantiate.c: allow !! inside of expression
	. extend do !!identifier( ) to support do !!expression( )
	. Other EEnoRV as-is
		on ~( %<_> )
		on %<_> < .
		do !! Narrative( %<_> )
	. improve >>>> B%%: Error / Warning handling - vs. exit(-1) or repeat
	. parser.c
		. more & better error messages
		. extract bm_parser_report from parser.c => error.c ?
		. integrate 'caught' in CNParserData => all flags
	. support multiple args in do input
		do < arg1, arg2, ..., argN > : "format" <
	. Design document: formalize the internal data structures, e.g.
		cell:[ [ entry:[ name, narratives:{} ], carry ], ctx:[ this, registry ] ]
	. optimization
		. Remodel occurrence->data->expression from char * to TBD
		. do_enable: without building string?
	. bm_void() - should bm_instantiate() verify expression?
		. Pros: instantiate all or nothing
		. Cons: performances
		. Alternative:
		  1. propose special execution mode (like Debug)
		  2. special do - e.g. do$ - where bm_void() is enforced
	  Current status & Decision
		. bm_instantiate() does not invoke bm_void()
		  => bm_instantiate() may do half a job (user responsibility)
	. per proto:expression <<< where proto can be '?' or narrative-type proto
		. PER/ELSE_PER
		. also DO_PER, e.g.
			do per ?:expression
				: var : %?
		  => only ONE occurrence->data->expression?
	. multi-threading (pthreads)
	. restore DEBUG mode in freeCNDB() and db_update() - cf. Version-1.1

TODOC
	. write Consensus B% Version-2.0 Programming Guide
		. Reminder: instantiation may do half a job, as
		  we do not pre-check with bm_void
	. update Consensus B% Version-1.x programming guide to
		  include Version-1.2 features - as Addendum (?)
	. Version-2.0 Announcement
		. Next Step: Version-2.1 (now Version-WIP)
		  building up on 1_Schematize/yak.new example
	. Version-2.0 README.txt - document output changes
		. multiple output format supported - with vector
			e.g. do >"%s%s":<*alpha,*beta>
		. default format ("%_") appends '\n' to the resulting output
			e.g. do >: expression
			  or do >:< expression(s) >
		. format %s allows single quote to be used without requiring
		  the corresponding SCE to be instantiated
			e.g do >"%s\n":'h'	// will always work
	. CAVEAT: in Version-2.0 implementation (db_op.c)
		signals as newborn entities become to-be-released => immediately visible
		whereas released entities cannot become signals => not repeatable
	    whereas
		in Version-WIP entities can be both newborn and to-be-released, these
		entities being born as released; furthermore, released entities can be
		reborn as released, using the new combination (e,nil) x ((nil,e),nil)
	. CAVEAT: tricky usage of ~ esp. in EENO
		e.g. on ?:~toto < .be
		does not mean that anything other than toto will pass
		it means that anything matching *what the caller has*
		other than toto will pass -- note that in this case we
		do not have pivot, and that the expression, since it is
		negated, will be dereferenced first in the caller
		in other words: ~instance does not mean "not this instance",
		but the set of instances other than this instance in the CNDB
		Therefore it has to be dereferenced in the caller's CNDB first,
		as EENO are external *event* occurrences, and are not supposed to
		give access to the contents of the external CNDB
	. CAVEAT: DBFirst() DBNext() do not traverse proxy.as_sub[0]^n
		=> These instances will not be found in Version-2.0 when the
		   query expression is non-pivotable
		=> Not a problem in Version-2.1 (currently WIP) as these will
		   only be created as DB_SIGNAL_OP
	. CAVEAT: proxies are NOT manifested on creation

