TODO
	. component execution platform / interactive System creation
		=> bmedit or ./B% -i

KNOWN ISSUES and WORKAROUNDS
    external
	. do >"%(N,...):%_\n": %(N,...) => outputs { N, (N,9) }N,...):
	  => that's because parser replaces %( with default format %_
	     should actually exit on error
	. do ~({titi,toto}) accepted but does nothing
	. do :< a, b >: ({1,2},3) => wrong assignment order
    internal
	. context.bm_translate(): commented out "if !db_deprecated()"
	  Assumption is that no translation is ever asked of deprecated entity
	  which is not true - e.g. on ~(:?) is supported
	  => proper solution would be for bm_mark to check !db_deprecated()
	. operation.c:in_condition() and expression.c:bm_output()
	  commented out !p_filtered(p) test for EEnoRV as-is
	  therefore	in %<_>:_ 	=> same as in %<_>
		and	do >"_": %<_>:_	=> same as do >"_":%<_>
	  Workaround: filter the other way around, or enclose in parentheses
	. in context.c:bm_translate()
		if ( db_deprecated(x,db_dst) ) => must REHABILITATE
		done in case of identifier, but not for proxy nor shared entity

NICE TO HAVE
	. change literal and list into <:sequence:> or <:sequence>
	  literal
		do <:askdjh:> // or any couple's first term
	  list
		do (( list, ... ), <:sequence:> ) // list
		do (( list, ... ), < expression(s) > )
		do (( list, ... ), expression )
		+ do not automatically add star as list's first term
	  Benefits
		. simplify parser and prune.c
	. p_prune and bm_parse_expr can be implemented using bm_traverse()
	  which would centralize all B% file format and syntax dependencies
	  into the single file ./include/traversal.h
	. we could have initial state %%, allowing narrative to be
	  :
		en %(:?)
	  .: %%
		on init // optional, could be also on %% or on this
			do : base	
	  .: base
		...
	  .: &
		// post-frame
	. OPT: nice to have: design/specs/PivotQueryOptimization.spec
	. OPT: locate_pivot && query_traversal in case of **...*identifier
	. OPT: btreeCache(): could use addIfNotThere - but uint is an issue
	. inform.story / system.story integration
		categorize output by cosystem, including # > generated
	. TM.system format extensions
	  . allow '< cosystem' in TM.system
		do "action occurrence"
		 > "generated occurrence"
		 < cosystem
	    TBD: complement or replace db_arena_origin() ?
	  . allow commenting out sections of TM.system - useful for
	    development / testing / debugging
	  . do "" / on "" for do exit / on init
		=> db_arena_makeup must accept NULL
	    Note: B% does not support on "_" for the time being
	. system.story launch optimization
			?*:( ?, %?::((?,.),.) ) (...)
			?*:( ?:~!!, %?:((.,?),.) ) (...)
				?*:( ?, %? ) (...)
	  We want these loop to execute iff the second term - UBE - has
	  no association in carry->db
	. %list and |^tag currently cannot be used in DO and ON and PER
	  we only support tagging in condition evaluation e.g. %(expression|^tag )
	  which could be extended to cover e.g. OUTPUT, FORE, etc.
	.  support func-like macros in parser_io.c
	   support \ after #define in parser_io.c
	. in $(s,?:...)	// match string - do later
	  $((?,...):*s)	// do later
	  $<(!,?:...)>	// do later
	  $/regex/	// for "_"
	. Note: in the future I want to be able to
		do list: "%$" <"string"	or do list < "string"
	  so that
		do >"%$": %( list, ?:... ) outputs string
		and we have *list pointing to the last string character
		could be NULL terminated?
	  Conversely, I want to be able to make a string out of a list
	  => The string would then be stored in string arena
	  	do : handle : $(list)	or ??
	. parser.c: in "^" on '^' if is_f(FORE) ...
		strictly speaking we should verify either
			are_f(ASSIGN|PRIMED|CARRY|FORE) or
			are_f(ASSIGN|PRIMED|UBE|PIPED|FORE)
		but ASSIGN and PIPED flags are gone...
	  Anyway not a bug, as ^^ will return NULL and expression will fail
	  but less user assistance than ideal, as we would like to verify
	  ASSIGN|PRIMED are set in order to allow ^^ and *^^ and *^%?
	. parser_macros: extract REENTER + put caught in io struct
	. expr1.expr1 would be ( expr1, expr 2 ) => deprecate list!
	. do >format:args | format:args | format:args
	. global function scope
	. do ~{ started, finish } for releasing all inside
	. do "occurrence" | ...
	. implement p_prune() using bm_traverse() ?
		. pros: less complexity in Base + consistent w/ code
		. cons: test each character
	. query, scan, feel, etc. could take &p as argument, so that
	       on return we have p = post-expression
	. extend do :_:_ | ... to ALL assignment operations, supporting
		^^ = current assignee / *^^ = current value
		?:(_)(_) and ?:(_){_} and ?!:_ and _^
		*^?:sub = bufferized value of %(%?:sub) (including *^?)
	. OPT: assignment: should use expression=Pair *
	. interactive - advanced / as per bm-Main.txt#interactive
	  1. import frame narrative (for execution only)
		allowing to bundle multiple do actions
	     would use bm_parse_cmd and read_CB instead of bm_parse_ui
		> in .
			_ <<<< bm_parse_cmd takes over
	     => user must enter tabs (?) (except first one)
	     => user must enter done to execute
	  2. import narrative or narrative sections (for registration and execution)
	     => use Main if existing + insert sub-root => output:
		:
		#!<sr>
			code from interactive
		#!</>
			original code
	     Options:
	     . name sub-root => enable/disable sections dynamically
	     . can also disable original code dynamically
	  3. set breakpoint
		using sub-narrative (?)
	. assignment could use %% instead of '*'
	. make %(_) mandatory condition to use filters in do expressions
	  e.g. do ( a:b, c ) generates error, vs. do ( %(a:b), c )
	  pro: no need to check filtered in bm_instantiate traversal, nor
	       in bm_parse/actionable
	  con: makes instantiation expressions possibly a bit heavier

	. B%-struct: about reading / executing commands
		supposedly also about typedef (mostly on Remarkable)
	. NTH: see design/specs/bm-LITERAL.txt ( ..., <a,b,c> ) etc.
	. dpu-drive.story
		: mem (variable assignment & usage in formulas)
	. do { _ }	<<<< ANY expression - assignment, release, etc.
	. finish variable stack - might answer issue below
		1. in .::expression << check we don't have (*,.) >> %. ?
		2. possibly implement .locale: expression (?)
	  issue: Yak: investigate (: %term :), (:\(%term\):) kinda race condition
	. Implement
		in .:expression	// e.g. in .:: OUT
			=> rebase perso for locale definition
			=> %. new registry variable
			=> now perso should be %[ perso, registry ]
		and any identifier lookup may go through the whole stack of registries
		Requirement
			expression:~( *, . )
		Example
			in .:: state	// pushes [ perso, registry ] where perso=%.:((*,%%),state)
				.locale	// instantiates ( %., locale )
		Benefit
		. locale will be released automatically on state changes
	. .locale: expression // initialization - use cases to be determined
		on ~.				// == inactive
		    =>	on/per ~. < src		// src can be determined
	. OPT: occurrence meta-characters ?:~ => ExpressionTake post-processing
		meaning, per Term: Ternary, Filtered, Unmarked, Coupled
	. parser.c / narrative.c
		NarrativeTake: on empty narrative: return Warning and just ignore
		ProtoSet: set errnum on double-def / already registered
	. locale variables: only on 'in_' and then attached to %?
	. do : var : %?	when %? is NULL
		=> should it be equivalent to do : var : ~.
		=> currently assignment fails
	. support per condition
		complements per event < %%
		but then we'd want to allow variable names in condition
	. allow !! inside of expression instead of assignment only
		requires changes in parser.c and instantiate.c
	. ( a, b, c, ... ) translates into ((( a, b ), c ), ... )
	. extend do !!identifier( ) to do !!expression( )
	. Other EEnoRV as-is
		on ~( %<_> )
		on %<_> < .
		do !! Narrative( %<_> )
	. improve >>>> B%%: Error / Warning handling - vs. exit(-1) or repeat
	. parser.c
		. more & better error messages
		. extract bm_parser_report from parser.c => error.c ?
	. support multiple args in do input
		do < arg1, arg2, ..., argN > : "format" <
	. Design document: formalize the internal data structures, e.g.
		cell:[ [ entry:[ name, narratives:{} ], carry ], ctx:[ this, registry ] ]
	. optimization
		. Remodel occurrence->data->expression from char * to TBD
		. do_enable: without building string?
	. bm_void() - should bm_instantiate() verify expression?
		. Pros: instantiate all or nothing
		. Cons: performances
		. Alternative:
		  1. propose special execution mode (like Debug)
		  2. special do - e.g. do$ - where bm_void() is enforced
	  Current status & Decision
		. bm_instantiate() does not invoke bm_void()
		  => bm_instantiate() may do half a job (user responsibility)
	. multi-threading (pthreads)
	. restore DEBUG mode in freeCNDB() and db_update() - cf. Version-1.1
	. really think about
		on init <=> on ( %% )
		do exit <=> do ~( %% )
	  => we have
		nil:( NULL, NULL ) as it should <<< actually could be anything I want >>>>
	  	%%:( ( NULL, (CNCell*) this ), NULL )
				^------	( [ entry:narrative, carry:NULL ], ctx )
	          db:[ nil, ndx ] -----------------------------------------^
			     ^----------------- registries ----------------^
		Why not separate CNDB and ctx ? Because I want access to db from ctx !
	  The thing I am interested in being the relationship between %% and nil

TODOC
	. FEATURE: per-else sequences are accepted, e.g.
		per expression	// resp. per expression < .
			action	// not even required
		else // no match was found for expression
			...
	. FORE and PER register ALL matches regardless of mark
	  e.g. the following will output 'a' twice, resp. (a,b) and (a,c)
		on init
			do { (a,b), (a,c) }
		else per ( ?, . )
			do >: %? // resp. >: %!
			do exit
	. cf. Test/37_include: path is relative to the story file path,
	  not to the current B% working directory
	. [sub]narrative definition CAN start at tab 0 after declaration
	. active registry not verified on event < *src
	  when specified directly, *src is not required to be in %@ for EENO to perform
	. %identifier' in literal or list MUST be followed by non-separator
	. write Consensus B% Version-2.0 Programming Guide
		. Reminder: instantiation may do half a job, as
		  we do not pre-check with bm_void
	. update Consensus B% Version-1.x programming guide to
		  include Version-1.2 features - as Addendum (?)
	. Version-2.0 Announcement
		. Next Step: Version-2.1 (now Version-WIP)
		  building up on 1_Schematize/yak.new example
	. Version-2.0 README.txt - document output changes
		. multiple output format supported - with vector
			e.g. do >"%s%s":<*alpha,*beta>
		. default format ("%_") appends '\n' to the resulting output
			e.g. do >: expression
			  or do >:< expression(s) >
		. format %s allows single quote to be used without requiring
		  the corresponding SCE to be instantiated
			e.g do >"%s\n":'h'	// will always work
	. CAVEAT: in Version-2.0 implementation (db_op.c)
		signals as newborn entities become to-be-released => immediately visible
		whereas released entities cannot become signals => not repeatable
	    whereas
		in Version-WIP entities can be both newborn and to-be-released, these
		entities being born as released; furthermore, released entities can be
		reborn as released, using the new combination (e,nil) x ((nil,e),nil)
	. CAVEAT: tricky usage of ~ esp. in EENO
		e.g. on ?:~toto < src
		does not mean that anything other than toto will pass
		it means that anything matching *what the caller has*
		other than toto will pass -- note that in this case we
		do not have pivot, and that the expression, since it is
		negated, will be dereferenced first in the caller
		in other words: ~instance does not mean "not this instance",
		but the set of instances other than this instance in the CNDB
		Therefore it has to be dereferenced in the caller's CNDB first,
		as EENO are external *event* occurrences, and are not supposed to
		give access to the contents of the external CNDB
	. CAVEAT: DBFirst() DBNext() do not traverse proxy.as_sub[0]^n
		=> These instances will not be found in Version-2.0 when the
		   query expression is non-pivotable
		=> Not a problem in Version-2.1 as these are created as DB_SIGNAL_OP

