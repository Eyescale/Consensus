See Also: design/new-features-and-additions.txt
TODO
	. Implement %<(expression)> using ! as pivot in expression, e.g.
		on (%%,.) < ?
			do >: %<(!,?:...)>
	  outputs all newly instantiated %((%%,.),?:...) in %< (followed by '\n')
	. automatically deprecate ( proxy, ... ) on instantiation => signal only
	. automatically search log( RELEASED ) for on expression < src where
		pivot is %% and pivot.exponent is as_sub[0]^n
	  Notes:
	  . kinda on expression~ < src which we do not want to support
	  . "spying" on signals between other connections is allowed, but
	    requires explicitely specifying
			on ~( proxy_dst, ... ) < proxy_src
	. CLEANUP
		. p_prune( ) use strmatch( "asd", event ) in default
		  Actually I would like default to be all the cases which are WRONG
		. IFN_PIVOT PUSH LUSH POP LOP => no longer #define
		. use data.instance to return results from xp_traverse/xp_traverse_list
	. do >: expression should append '\n' to the result
	. Version-2.0 README.txt - document output changes
		. multiple output format supported - with vector
			e.g. do >"%s%s":<*alpha,*beta>
		. format %s allows single quote to be used without
		  requiring the corresponding SCE to be instantiating
			e.g do >"%s\n":'h'	// will work
	. Release/Version-WIP/Examples/4_Yak
		. supporting B% Grammar as example
		. with interactive traversal
	. WARNING: self and parent proxies are manifested on new cell creation
	     =>	: // will output @@@
			on init
				do !! Cell()	// new cell
			else on ? < .		// catches cell's self proxy
				do >"%_\n": %<?>
				do exit
		: Cell
			on init
				do ( hello, world )
				do exit
WIP
	. Documentation
		1. write Consensus B% Version-2.0 Programming Guide
			. Reminder: instantiation may do half a job, as
			  we do not pre-check with bm_void
		2. update Consensus B% Version-1.x programming guide to
		  include Version-1.2 features - as Addendum (?)
	. Version-2.0 Announcement
		. Next Step: Version-2.1 (now Version-WIP)
		  building up on 1_Schematize/yak.new example

DONE
	. %( list, ?:... ) implementation done
	  conceptually the same as %((list,...),?) - not implemented -
	  representing ALL %((list,...),?,?,?,...) - cf. Test/23_list-exp
	. REV-2.0 ASSIGNMENT rules
	  in/on : variable : value [ < src ]
		  %? (resp.%<?>) represents whatever is marked in expression
		  %! (resp.%<!>) ALWAYS represents the whole expression: ((*,.),.)
	  e.g. in/on : variable : value < ?
		  %<?> same as %< - so yes, basically useless, BUT
		  %<!> same as %<!:((*,variable),value)>
	  Test/script for all assignment cases
	. REV-2.0 SIGNAL handling
	  identifier~ only supported during INSTANTIATION
	  and then has precedence over e.g. do *identifier ~<
		which should be written do (*identifier) ~<
		otherwise interpreted as do *identifier~ <
		which generates ERROR
	  on signal~ < src
		should likewise become on ~( signal ) < src
		otherwise generate ERROR
	  cf. ./Examples/3_TM.multi/TM_head-cell.story
	. Branched Version-2.0

NICE TO HAVE
	. allow %@ to be used - spec?
	. extend do !!identifier( ) to support do !!expression( )
	. Other EEnoRV as-is
		on ~( %<_> )
		on %<_> < .
		do !! Narrative( %<_> )
	. improve >>>> B%%: Error / Warning handling - vs. exit(-1) or repeat
	. parser.c
		. more & better error messages
		. extract bm_parser_report from parser.c => error.c ?
		. integrate 'caught' in CNParserData => all flags
	. support multiple args in do input
		do < arg1, arg2, ..., argN > : "format" <
	. Design document: formalize the internal data structures, e.g.
		cell:[ entry:[ name, narratives:{} ], ctx:[ this, registry ] ]
	. optimization
		. Remodel occurrence->data->expression from char * to TBD
		. do_enable: without building string?
	. bm_void() - should bm_instantiate() verify expression?
		. Pros: instantiate all or nothing
		. Cons: performances
		. Alternative:
		  1. propose special execution mode (like Debug)
		  2. special do - e.g. do$ - where bm_void() is enforced
	  Current status & Decision
		. bm_instantiate() does not invoke bm_void()
		  => bm_instantiate() may do half a job (user responsibility)
	. per proto:expression <<< where proto can be '?' or narrative-type proto
		. PER/ELSE_PER
		. also DO_PER, e.g.
			do per ?:expression
				: var : %?
		  => only ONE occurrence->data->expression?
	. multi-threading (pthreads)
	. restore DEBUG mode in freeCNDB() and db_update() - cf. Version-1.1

