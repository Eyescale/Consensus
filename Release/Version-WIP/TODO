See Also: design/new-features-and-additions.txt
TODO
	. do (( list, ... ), expression )
		. must instantiate expression => bm_xpan() on pop => is_f(ELLIPSIS)
		. problem: will reverse order (?)
	. do (( list, ... ), < expression(s) > )
	. Publish %@
	. proto :( func, ... )	vs. locale(s) ?
	. NTH: verify_traversal optimization
		in pivot.p=='%(' and pivot.e==current xp_traverse'd (?)
		but actually we do have a pivot.e inside LIST_EXPR (?)
	. Maths
		. Add, Mult, Sub, Div
		. Mem
		. Yak integration (full interactive calculator)
	. NTH: ( a, b, c, ... ) translates into ((( a, b ), c ), ... )
	. publish %@
	. CLEANUP
		. p_prune( ) use strmatch( "asd", event ) in default
		  Actually I would like default to cover all the terminal cases
	. Release/Version-WIP/Examples/4_Yak
		. supporting B% Grammar as example
		. with interactive traversal

TODOC
	. write Consensus B% Version-2.0 Programming Guide
		. Reminder: instantiation may do half a job, as
		  we do not pre-check with bm_void
	. update Consensus B% Version-1.x programming guide to
		  include Version-1.2 features - as Addendum (?)
	. Version-2.0 Announcement
		. Next Step: Version-2.1 (now Version-WIP)
		  building up on 1_Schematize/yak.new example
	. Version-2.0 README.txt - document output changes
		. multiple output format supported - with vector
			e.g. do >"%s%s":<*alpha,*beta>
		. default format ("%_") appends '\n' to the resulting output
			e.g. do >: expression
			  or do >:< expression(s) >
		. format %s allows single quote to be used without requiring
		  the corresponding SCE to be instantiated
			e.g do >"%s\n":'h'	// will always work
	. CAVEAT: in Version-2.0 implementation (db_op.c)
		signals as newborn entities become to-be-released => immediately visible
		whereas released entities cannot become signals => not repeatable
	    whereas
		in Version-WIP entities can be both newborn and to-be-released, these
		entities being born as released; furthermore, released entities can be
		reborn as released, using the new combination (e,nil) x ((nil,e),nil)
	. CAVEAT: tricky usage of ~ esp. in EENO
		e.g. on ?:~toto < .be
		does not mean that anything other than toto will pass
		it means that anything matching *what the caller has*
		other than toto will pass -- note that in this case we
		do not have pivot, and that the expression, since it is
		negated, will be dereferenced first in the caller
		in other words: ~instance does not mean "not this instance",
		but the set of instances other than this instance in the CNDB
		Therefore it has to be dereferenced in the caller's CNDB first,
		as EENO are external *event* occurrences, and are not supposed to
		give access to the contents of the external CNDB
	. CAVEAT: DBFirst() DBNext() do not traverse proxy.as_sub[0]^n
		=> These instances will not be found in Version-2.0 when the
		   query expression is non-pivotable
		=> Not a problem in Version-2.1 (currently WIP) as these will
		   only be created as DB_SIGNAL_OP
	. CAVEAT: self and parent proxies are manifested on new cell creation
	     =>	: // will output @@@
			on init
				do !! Cell()	// new cell
			else on ? < .		// catches cell's self proxy
				do >"%_\n": %<?>
				do exit
		: Cell
			on init
				do ( hello, world )
				do exit

DONE
	. implemented %((?,...):expression) = expression's root(s)
	. do (( expression, ... ), sub-expression )
		converts into ((((expression,a),b),...),z)
			where {a,b,...,z}==sub-expression query results
		Note that e.g. do (( expression, ... ), identifier )
			requires identifier to be instantiated
	. implemented db_fire_proxy( proxy, db )
		. called in bm_context_update() before db_update()
		. performs db_op( DB_SIGNAL_OP, e, db ) on all e:(proxy,.)
	. db_proxy() no longer manifests new proxies [rev-2.0]
		<=> proxy instantiation does not trigger any event
	. do >: expression // appends '\n' to the resulting output [rev-2.0]
	. %<(expression)> done, using ! as pivot in expression, e.g.
		on (%%,.) < ?
			do >: %<(!,?:...)>
	  	does output all newly instantiated %((%%,.),?:...) in %<
	. %( list, ?:... ) implementation done
	  conceptually the same as %((list,...),?) - not implemented -
	  representing ALL %((list,...),?,?,?,...) - cf. Test/23_list-exp
	. REV-2.0 ASSIGNMENT rules
	  in/on : variable : value [ < src ]
		  %? (resp.%<?>) represents whatever is marked in expression
		  %! (resp.%<!>) ALWAYS represents the whole expression: ((*,.),.)
	  e.g. in/on : variable : value < ?
		  %<?> same as %< - so yes, basically useless, BUT
		  %<!> same as %<!:((*,variable),value)>
	  Test/script for all assignment cases
	. REV-2.0 SIGNAL handling
	  identifier~ only supported during INSTANTIATION
	  on signal~ < src
		should therefore become on ~( signal ) < src
		otherwise generate ERROR
	  cf. ./Examples/3_TM.multi/TM_head-cell.story
	. Branched Version-2.0

NICE TO HAVE
	. do (( expression, ... ), < expression(s) > )
	. allow %@ to be used - spec?
	. extend do !!identifier( ) to support do !!expression( )
	. Other EEnoRV as-is
		on ~( %<_> )
		on %<_> < .
		do !! Narrative( %<_> )
	. improve >>>> B%%: Error / Warning handling - vs. exit(-1) or repeat
	. parser.c
		. more & better error messages
		. extract bm_parser_report from parser.c => error.c ?
		. integrate 'caught' in CNParserData => all flags
	. support multiple args in do input
		do < arg1, arg2, ..., argN > : "format" <
	. Design document: formalize the internal data structures, e.g.
		cell:[ entry:[ name, narratives:{} ], ctx:[ this, registry ] ]
	. optimization
		. Remodel occurrence->data->expression from char * to TBD
		. do_enable: without building string?
	. bm_void() - should bm_instantiate() verify expression?
		. Pros: instantiate all or nothing
		. Cons: performances
		. Alternative:
		  1. propose special execution mode (like Debug)
		  2. special do - e.g. do$ - where bm_void() is enforced
	  Current status & Decision
		. bm_instantiate() does not invoke bm_void()
		  => bm_instantiate() may do half a job (user responsibility)
	. per proto:expression <<< where proto can be '?' or narrative-type proto
		. PER/ELSE_PER
		. also DO_PER, e.g.
			do per ?:expression
				: var : %?
		  => only ONE occurrence->data->expression?
	. multi-threading (pthreads)
	. restore DEBUG mode in freeCNDB() and db_update() - cf. Version-1.1

