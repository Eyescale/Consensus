:
	on init
		do : dial : !! Dial((:0123456789:),OPT)
		do : X : ((X,...):1230456:)
		do : Y : ((Y,...):9870654:)
		do : Z : ((Z,...)::)
		do : state : INIT
	else in : state : INIT
		do : state : MULT
		in (((X,*),.),.)
			do :< P, q >:< *X, *Y >
		else	do :< P, q >:< *Y, *X >
	else in : state : MULT
		on ~( %%, MULT ) < ?  // read operation's results
			do :< c, v >: %<(!,?:...)>
		else on : v : ?
			do : r : ( *r, %? )
			in : p : ( ?:~(.,*), . )
				do : p : %?
			else
				do : p : ~.
		else on : p : (.,?)  // dial next digit(s) operation
			do (( *dial, ... ),< MULT, %?, %(*q:(.,?)), *c >)
		else on : p : ~.
			in : c : (?:~0)
				do : r : ( *r, %? )
			do : state : MSUM
		else on : state : .
			do :< p, c, r >:< *P, 0, (r,*) >
	else in : state : MSUM
		/* we have
			: r : (( r, * ), ... )	// input
			: s : (( s, * ), ... )  // done digits
			: t : (( t|u, * ), ... ) // in construction
			: u : ( u|t, * ) // ... t and u alternating
		*/
		on ~( %%, MSUM ) < ?  // read digit-sum operation's results
			do :< c, v >: %<(!,?:...)>
		else on : v : ?
			in : r : ((.,*),.) // first digit-sum result goes to s
				do : s : ( *s, %? )
				do ~( *u, . )  // clear (u,*)
			else
				do : u : ( *u, %? ) // build new u

			in ?:( *r, . )
				do : r : %?
				// Note: r may have one more digit than t (but not more)
				in ?:( *t, . )
					do : t : %?
				else
					do (( *dial, ... ),< MSUM, %(%?:(.,?)), 0, *c >)
			else
				do : r : ~.
		else on : r : ~.
			do ~((r,*),.)  // clear (r,*)
			in : q : ( ?:~(.,*), . )
				in : c : (?:~0)  // finish u
					do : u : ( *u, %? )
				do : state : MULT
				do : q : %?
			else
				do ~( %((.,*):%((?,...):*t)) )
				in : c : (?:~0)
					do : t : ( *u, %? )
				else do : t : *u
				do : state : FORMAT
		else on : t : ?
			do (( *dial, ... ),< MSUM, %(*r:(.,,?)), %(%?:(.,?)), *c >)
		else on : state : .
			do : c : 0
			in ~.: u  // very first round: separate r into s and u
				in ?:((r,*),.)
					do : s : ((s,*),%(%?:(.,?)))
					do : t : (t,*)
					in ( %?, . )  // r has more than one digit
						do : u : (((u,*),...),%(%?,?:...))
						do : r : ~.
					else  // both X and Y are one digit - and no carry
						do : state : FORMAT
						do ~( %? )
			else
				// swap t and u from last round
				do : t : %(((.,*),.):%((?,...):*u))
				do : u : %((.,*):%((?,...):*t))
				do : r : %(( r, * ), . )
	else in : state : FORMAT
		on : r : ?
			in %?: ~(.,*)  // inform Z from t then s
				do : Z : ( *Z, %(%?:(.,?)) )
				do : r : %(%?:(?,.))
			else in %?: ~(s,.)
				do ~( %? )
				do : r : *s
			else
				do ~( %? )
				do : state : OUTPUT
		else on : state : .
			do : r : *t
	else in : state : OUTPUT
		on : p : (.,?)
			do > "%s" : %?
			in ?: ( *p, . )
				do : p : %?
			else in : q : X
				do > " x "
				do : p : %((Y,*), . )
				do : q : Y
			else in : q : Y
				do > " = "
				do : p : %((Z,*), . )
				do : q : Z
			else
				do > "\n"
				do exit
		else on : state : .
			do >"\t"
			do : p : %((X,*), . )
			do : q : X

: Dial
	in : state : MSUM	// add q to p via n
		on : n : ? 
			in %?: 0
				in : c : 0
					do (( .., ... ),< MSUM, *r, *p >)  // notify result
					do : state : ~.
				else 
					do : n : *c	// set n to carry
					do : c : 0
			else
				do : n : %(?,(%?,.))	// decrement n
				in (*p,(?,.))		// increment p
					do : p : %?
				else
					do : r : %(*r,(?,.))	// increment report
					do : p : 0		// reset p to 0
		else on : state : .
			do : n : *q	// set n

	else in : state : MADD	// add q to (r,p) i times, via n
		on : n : ? 
			in %?: 0
				do : i : %(?,(*i,.))	// decrement i
			else
				do : n : %(?,(%?,.))	// decrement n
				in (*p,(?,.))		// increment p
					do : p : %?
				else
					do : r : %(*r,(?,.))	// increment report
					do : p : 0		// reset p to 0
		else on : i : ?
			in %?: 0
				in : c : 0
					do (( .., ... ),< MULT, *r, *p >)  // notify result
					do : state : ~.
				else 
					do : n : *c	// set n to carry
					do : i : 1	// last round
					do : c : 0
			else
				do : n : *q		// reset n
		else on : state : .
			do : p : *q			// set p to q
			do : i : %(?,(*p,.))		// set i to p-1
			do : n : *q			// set n
			do : r : 0

	else in : state : MSUB	// sub q from (r,p) i times, via n
		on : n : ?
			in %?: 0
				in (?,(*i,.))  // decrement i
					in %?: 0
						do : state : MADD
						do : i : 0
					else
						do : i : %?
						do : n : *q
			else
				do : n : %(?,(*n,.))	// decrement n
				in (?,(*p,.))
					do : p : %?	// decrement p
				else
					do : r : %(?,(*r,.))	// decrement report
					do : p : %(?,'\0')	// reset p to MAX
		else on : i : .
			do : n : *q

	else in : state : MAXX	// compute i x (base-1)
		on : i : ?
			in (%?,'\0')
				in ( X ) // here from OPT
					do : r : %(?,(*q,.))
					do : p : *r
					do : state : MSUB
					do : i : *t
				else
					do : r : %(?,(*p,.))
					do : p : *r
					do : state : MADD
					do : i : 0
			else 
				do : i : %(%?,(?,.))	// increment i
				do : r : %(*r,(?,.))	// increment report
		else on : state : .
			do : i : ( X ? *q : *p ) // may be here from OPT
			do : r : 1

	else in : state : MCEN	// compute (r,p)=q*(n=base/2)
		on : i : ?
			in %?: *q
				in : p : *n
					do : state : MADD
					do : i : 0 	// override default state init
					on : r : .
						do : p : 0
				else
					do : state : ( X ? MADD : MSUB )
					do : i : *t
					on : r : .
						do : p : 0
					else
						do : p : *n
			else
				do : i : %(%?,(?,.))	// increment i
				on : r : .		// increment report every 2nd time
				else
					do : r : %(*r,(?,.))
		else on : state : .
			do : i : 1

	else in : state : OPT  // optimize using (base-1) or (base/2) depending on n=neg(p)
		on : r : ?
			in ( X ? (%?:*X) : (%?:*p) ) // r reaches X=neg(p) resp. p before i reaches center
				in ( X )
					do : state : MAXX
					do : t : %(?,(%?,.))	// t is MAXX's argument to MSUB
				else
					do : state : MADD	// as is
			else in : i : *n  // i reaches center
				do : state : MCEN
				do : t : %(?,(%?,.))	// t is MCEN's argument to MADD/MSUB
				do : r : 0		// r is MCEN's alternator
			else
				do : r : %(%?,(?,.))	// increment r
				do : i : %(*i,(?,.))	// increment i
				do : n : %(?,(*n,.))	// decrement n
		else on : i : ?
			in %?: *n			// center reached
				do : state : MCEN
			else in %?: *p			// p reached
				do : r : 1
			else in : n : *p		// neg(p) reached
				do : X : %?
				do : r : 1
			else
				do : i : %(%?,(?,.))	// increment i
				do : n : %(?,(*n,.))	// decrement n
		else on : state : .
			do : i : %(1,(?,.))
			do : n : %(?,(.,'\0'))

	else in : state : MULT
		on : i : ?  // no OPT - we want q > p
			in (%?,'\0')		// p is greater than q
				do : p : *q
				do : q : *p
				do : state : MADD
			else in %? : *q		// q is greater than p
				do : state : MADD
			else do : i : %(%?,(?,.))
		else on : state : .
			in ((*p:0)?:(*q:0))
				do (( .., ... ),< MULT, 0, *c >) // notify result
				do : state : ~.
			else in *p: %(?,'\0')
				do : p : *q
				do : state : MAXX
			else in *q: %(?,'\0')
				do : state : MAXX
			else in *p: 1
				do : p : *q
				do : state : MADD
				do : i : 0
			else in *q: 1
				do : state : MADD
				do : i : 0
			else in OPT
				do : state : OPT
			else
				do : i : %(*p,(?,.))

	else on ~( %%, ? ) < ..
		in %<?:( MULT )>
			do :< p, q, c >: %<(!,?:...)>
			do : state : MULT
			do : r : 0
			in OPT
				do : t : 0
				do ~( X )
		else in %<?:( MSUM )>
			do :< p, q, c >: %<(!,?:...)>
			do : state : MSUM
			do : r : 0

	else on exit < ..
		do exit

