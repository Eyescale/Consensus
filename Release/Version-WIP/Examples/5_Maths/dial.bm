/*
	Uses pre-instantiated literal - aka. dial - e.g.
		(:0123456789:)	==	0 --+---v
					    1 --+---v
						2 --+---v
						    3 --+---v
							... +---v
							    9 --+--\0
	to perform arithmetic operations
*/
: Dial
	in : MSUM	// add q to p via n
		on : n : ? 
			in %?: 0
				in : c : 0
					do (( .., ... ),< MSUM, *r, *p >)  // notify result
					do : ~.
				else 
					do : n : *c	// set n to carry
					do : c : 0
			else
				do : n : %(?,(%?,.))	// decrement n
				in (*p,(?,.))		// increment p
					do : p : %?
				else
					do : r : %(*r,(?,.))	// increment report
					do : p : 0		// reset p to 0
		else on : .
			do : n : *q	// set n

	else in : MADD	// add q to (r,p) i times, via n
		on : n : ? 
			in %?: 0
				do : i : %(?,(*i,.))	// decrement i
			else
				do : n : %(?,(%?,.))	// decrement n
				in (*p,(?,.))		// increment p
					do : p : %?
				else
					do : r : %(*r,(?,.))	// increment report
					do : p : 0		// reset p to 0
		else on : i : ?
			in %?: 0
				in : c : 0
					do (( .., ... ),< MULT, *r, *p >)  // notify result
					do : ~.
				else 
					do : n : *c	// set n to carry
					do : i : 1	// last round
					do : c : 0
			else
				do : n : *q		// reset n
		else on : .
			do : p : *q			// set p to q
			do : i : %(?,(*p,.))		// set i to p-1
			do : n : *q			// set n
			do : r : 0

	else in : MSUB	// sub q from (r,p) i times, via n
		on : n : ?
			in %?: 0
				in (?,(*i,.))  // decrement i
					in %?: 0
						do : MADD
						do : i : 0
					else
						do : i : %?
						do : n : *q
			else
				do : n : %(?,(*n,.))	// decrement n
				in (?,(*p,.))
					do : p : %?	// decrement p
				else
					do : r : %(?,(*r,.))	// decrement report
					do : p : %(?,'\0')	// reset p to MAX
		else on : i : .
			do : n : *q

	else in : MAXX	// compute i x (base-1)
		on : i : ?
			in (%?,'\0')
				in ( X ) // here from OPT
					do : r : %(?,(*q,.))
					do : p : *r
					do : MSUB
					do : i : *t
				else
					do : r : %(?,(*p,.))
					do : p : *r
					do : MADD
					do : i : 0
			else 
				do : i : %(%?,(?,.))	// increment i
				do : r : %(*r,(?,.))	// increment report
		else on : .
			do : i : ( X ? *q : *p ) // may be here from OPT
			do : r : 1

	else in : MCEN	// compute (r,p)=q*(n=base/2)
		on : i : ?
			in %?: *q
				in : p : *n
					do : MADD
					do : i : 0 	// override default MADD init
					on : r : .
						do : p : 0
				else
					do : ( X ? MADD : MSUB )
					do : i : *t
					on : r : .
						do : p : 0
					else
						do : p : *n
			else
				do : i : %(%?,(?,.))	// increment i
				on : r : .		// increment report every 2nd time
				else
					do : r : %(*r,(?,.))
		else on : .
			do : i : 1

	else in : OPT  // optimize using (base-1) or (base/2) depending on n=neg(p)
		on : r : ?
			in ( X ? (%?:*X) : (%?:*p) ) // r reaches X=neg(p) resp. p before i reaches center
				in ( X )
#ifdef DEBUG
					do >"_"
#endif
					do : MAXX
					do : t : %(?,(%?,.))	// t is MAXX's argument to MSUB
				else
#ifdef DEBUG
					do >"|"
#endif
					do : MADD	// as is
			else in : i : *n  // i reaches center
#ifdef DEBUG
				do >"%s": ( X ? '-' : '!' )
#endif
				do : MCEN
				do : t : %(?,(%?,.))	// t is MCEN's argument to MADD/MSUB
				do : r : 0		// r is MCEN's alternator
			else
				do : r : %(%?,(?,.))	// increment r
				do : i : %(*i,(?,.))	// increment i
				do : n : %(?,(*n,.))	// decrement n
		else on : i : ?
			in %?: *n			// center reached
#ifdef DEBUG
				do >"."
#endif
				do : MCEN
			else in %?: *p			// p reached
				do : r : 1
			else in : n : *p		// neg(p) reached
				do : X : %?
				do : r : 1
			else
				do : i : %(%?,(?,.))	// increment i
				do : n : %(?,(*n,.))	// decrement n
		else on : .
			do : i : %(1,(?,.))
			do : n : %(?,(.,'\0'))

	else in : MULT
		on : i : ?  // no OPT - we want q > p
			in (%?,'\0')		// p is greater than q
				do :< p, q >:< *q, *p > // swap p q
				do : MADD
			else in %? : *q		// q is greater than p
				do : MADD
			else do : i : %(%?,(?,.))
		else on : .
			in ((*p:0)?:(*q:0))
#ifdef DEBUG
				in ( OPT ? (*q:~0:~1:~%(?,'\0')) :)
					do >" "
#endif
				do (( .., ... ),< MULT, 0, *c >) // notify result
				do : ~.
			else in *p: %(?,'\0')
#ifdef DEBUG
				in ( OPT ? (*q:~1:~%(?,'\0')) :)
					do >" "
#endif
				do : p : *q
				do : MAXX
			else in *q: %(?,'\0')
				do : MAXX
			else in *p: 1
#ifdef DEBUG
				in ( OPT ? (*q:~1) :)
					do >" "
#endif
				do : p : *q
				do : MADD
				do : i : 0
			else in *q: 1
				do : MADD
				do : i : 0
			else in OPT
				do : OPT
			else
				do : i : %(*p,(?,.))

	else on ~( %%, ? ) < ..
		in %<?:( MULT )>
			do :< p, q, c >: %<(!,?:...)>
			do : MULT
			do : r : 0
			in OPT
				do : t : 0
				do ~( X )
		else in %<?:( MSUM )>
			do :< p, q, c >: %<(!,?:...)>
			do : MSUM
			do : r : 0

	else on exit < ..
		do exit

