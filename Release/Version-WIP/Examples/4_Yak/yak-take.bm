/*---------------------------------------------------------------------------
|
|	yak input schema threads sub-narrative definition
|
+--------------------------------------------------------------------------*/
#define MEMOPT

.s: ((( schema, .p ), .f ), .r )
	on .EXIT
		do ~( (.,r):~%(?,EXIT) ? s : r )
#ifdef MEMOPT
	else in ~.: (r,.) // all r subscribers failed
		do ~( r )
#endif
	else .q
+	in .( ?, s ) // s is pending on rule
		on ~.: . < { %%, .. } // system deadlock
			do >&"Warning: Yak: unlocking rule '%_'\n": %(r:((.,?),.))
			do .EXIT
		else in .DONE
			on ~( .(.,r) ) // s successor fails
				in .(.,r) // s still has successor
				else do .EXIT // defunct
		else in .READY
			on : record : .
				do ~( .READY )
		else	// expecting TAKE from rule schemas
			on ((.,%?), ?:('[',.)) // TAKE: launch successor schema(s)
				do .(((schema, %(*q:(.,?))), %? ), r )
				on ((.,%?), ?:(']',.)) // TAKE: launch successor schema
					do .(((schema, %(*q:(.,?))), %? ), r )
			else on ((.,%?), ?:(']',.)) // TAKE: launch successor schema
				do .(((schema, %(*q:(.,?))), %? ), r )
			else // sync based on rule schemas
				in (.,%?): ~%(?,CYCLIC): ~%(?,DONE)
					in (.,%?): ~%(?,CYCLIC): ~%(?,DONE): ~%(?,READY)
					else do .READY // all non-cyclic rule schemas ready
				else // all non-cyclic rule schemas complete or non-existing
					do ( .CYCLIC ? .EXIT : .(.,r) ? .DONE : .EXIT )
	else on ~( .(.,s) ) // feeder rule failed
		do .EXIT

	else in .DONE // s is terminated
		on ~( %(r,?), . ) // r's subscribers connections changed
			in ~.: ( %(r,?), ((.,%(.?)),.) )
				// none of r's subscribers has a successor starting at s's finish frame
				in ~.: ((.,%(.?)), r ) :~s
					// r has no feeder starting at s's finish frame
					do .EXIT // defunct
		else on ((r,base) ? ((.,r):~%(((rule,.),.),?):~s,DONE) :)
			do .EXIT // redundant
	else on .( /[[\]]/, . )
		do .DONE // terminating

	else .event
+	in .READY // s is pending on user input = event
		on : record : (.,?)
			do ~( .READY )
			do : event : %?
	else on : event : .
		in : q : '\0'
			do .( '[', *record ) // terminate, unconsumed
		else in : q : (?,.) // expected @ current, not terminating position
			in %?: ( %, ? )
				in (( Rule, %? ), ( Schema, ~'\0' ))
					in ?: ((rule,%?), ('[',*record)) // rule already instantiated
						do .( %?, s )
						do ( %?:r ? .CYCLIC :)
					else do ( ((rule,%?), ('[',*record)) | {
						(((schema, %((Rule,%?),(Schema,?))), %|^(.,?)), %| ),
						.( %|, s ) } )
				else
					do >"Error: Yak: rule '%_' not found or invalid\n": %?
					do .EXIT
			else in %?: ( '\\', ? )
				in %?: i
					in : event : /[0-9]/
						do .check
						do .READY
					else in .check
						do ~( .check )
						do : event : *event // REENTER
						do : q : %(*q:(.,?))
					else do .EXIT // FAIL
				else in %?: d
					in : event : /[0-9]/
						do : q : %(*q:(.,?))
					else do .EXIT // FAIL
				else in %?: w
					in : event : /[A-Za-z0-9_]/
						do .check
						do .READY
					else in .check
						do ~( .check )
						do : event : *event // REENTER
						do : q : %(*q:(.,?))
					else do .EXIT // FAIL
				else in %?: 0
					in : event : '\0'
						do : q : %(*q:(.,?))
					else do .EXIT // FAIL
				else in : event : %?
					do : q : %(*q:(.,?))
				else do .EXIT // FAIL
			else in %?: ' '
				in : event : /[ \t]/
					do .READY
				else
					do : event : *event // REENTER
					do : q : %(*q:(.,?))
			else in : event : %?
				do : q : %(*q:(.,?))
			else do .EXIT // FAIL
		else // *q is a base entity (singleton) other than '\0'
			do >"Error: Yak: %_-terminated schema not supported\n": *q
			do .EXIT // FAIL
	else on : q : ?
		in %?: '\0'
			do .( ']', *record ) // terminate, consumed
		else in %?: (( %, ? ), . )
			in (( Rule, %? ), ( Schema, ~'\0' ))
				in ?: ((rule,%?), (']',*record)) // rule already instantiated
					do .( %?, s )
					do ( %?:r ? .CYCLIC :)
				else do ( ((rule,%?), (']',*record)) | {
					(((schema, %((Rule,%?),(Schema,?))), %|^(.,?)), %| ),
					.( %|, s ) } )
			else
				do >"Error: Yak: rule '%_' not found or invalid\n": %?
				do .EXIT
		else do .READY

	// s init
	else on ( s )
		// schema is in null position AND has predecessor
		in ( p:'\0' ? ((.,r), s ) :)
			do .( f ) // TAKE as-is
		else
			do : q : p
			in f: ('[',(.,?)) // event to be consumed
				do : event : %?

