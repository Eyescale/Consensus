# Yak scheme definition file
#
# Format
#	((Rule,base), ((%,identifier),'\0') )
#	(( Rule, identifier ), ( Schema, {
#		(a,(b,...((%,id),...(z,'\0'))))
#		... }))
# Description
#	Assumed to be used in conjunction with yak.story, e.g.
#	from ./EyeScale/Consensus/Release/Version-WIP/Examples/4_Yak
#		../../B% -f Schemes/space yak.story


# base rule definitions - enable only one of the following
// #define SPACE
#define TERM
// #define S_TERM

#ifdef SPACE
#	(( Rule, base ), ( Schema, (: :)) )
#	(( Rule, base ), ( Schema, (:%s:)) )
	(( Rule, base ), ( Schema, (:%space:)) )

#	(( Rule, space ), ( Schema, (: :) ))	// recommended - if must be
	(( Rule, space ), ( Schema, (:%s:) ))	// functional

#eldef TERM
	(( Rule, base ), ( Schema, {
		(: %term :)
	} ))
	(( Rule, term ), ( Schema, {
#		(:\i:)
		(:%int:)
		(:\( %term \):)	
	} ))

#eldef S_TERM
	(( Rule, base ), ( Schema, {
		(:%s%term%s:)
	} ))
	(( Rule, term ), ( Schema, {
#		(:\i:)
		(:%int:)
		(:\(%s%term%s\):)
	} ))

#endif

# s rule definitions
#define NULL
#ifndef NULL
	(( Rule, s ), ( Schema, (: :)) )
#else // testing null-schema
	(( Rule, s ), ( Schema, {
		(::)
#		(:%s\ :), (:%s\t:)
		(:%s :)	
	} ))
#endif

# int rule definition (alternative to \i)
	(( Rule, int ), ( Schema, {
		(:\d:)
		(:%int\d:)
	} ))

