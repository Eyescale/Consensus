/*===========================================================================
|
|		Yak narrative definition
|
+==========================================================================*/
: Yak
	on exit < ..
		do exit

	else in : IN  // input
		in .( ?, base )
			en (((schema,.),.),.)
			in .READY
				on ~( %%, ? ) < ..
					do : record : (*record,%<?>)
				else on : record : .
					do ~( .READY )
			else in (.,%?): ~%(?,DONE)
				in (.,%?): ~%(?,DONE): ~%(?,READY)
				else // all feeder schemas ready
					do ( .., READY ) // notify ready
					do .READY
			else on ~.: . // all feeder schemas done
				in ((.,%?),(']',(record,*)))
					do ~( %?, base )
				else in ((.,%?),('[',((record,*),.)))
					do ~( %?, base )
				else in ~.: ((.,%?),(/[[\]]/,*record))
					do ~( %?, base )
				else
					do ( .., IN ) // notify traversal
					do :< %%, pending >:< OUT, READY >
		else on ~( ., base ) // FAIL
			in : record : (record,*)
				do >&"(nop)\n"
				do ( .., ERR )	// nop
			else
				do ( .., OUT ) // notify failure
				do : REC
		else on : . // start base rule instance - feeding base
			do (((rule,base), (']',*record)) | {
				(((schema, %((Rule,base),(Schema,?:~'\0'))), %|::(.,?)), %| ),
				.( %|, base ) } )

	else in : OUT  // traversal
		.s .f .r
		on : .
			do :< s, f >:< base, (record,*) >

		else in : pending : ?
+
		on ~( %%, ? ) < .. // on parent(=driver)'s signal
			in %<?:( DONE )> // no matter what
				do ~( OUT, . )
				do ~( IN, . )
				do : ~.
			else in %?: READY // ready to start
				in %<?:( FLUSH )>
					do ( .., OUT )
					do : REC
			else in %?: OUT
			else in %?: ( CARRY, . )
			else in %?:( TAKE, . ) // after take notification
				in : pop : ? // popping anyway
					do : pending : ((%?:OUT) ?: (OUT,%?))
					do : pop : ~.
				else in : push : OUT // leaving anyway
					do : pending : OUT
					do : push : ~.
				else in : push : ?
					in %<?:( CONTINUE )>
						do : pending : (IN,%?)
						do : push : ~.
					else
						do :< s, r >:< %?, %(%?:(.,?)) >
						do : push : ( OUT, OUT )
				else in %<?:( PRUNE )>
					do : push : OUT
			else in %?:( IN, ? ) // after push notification
				do :< s, r >:< %?, %(%?:(.,?)) >
				in %<?:( PRUNE )>
					do : push : ( IN, OUT )
			else in %?:( OUT, ? ) // after pop notification
				do :< s, r >:< %?, %(%?:(.,?)) >
				in %<?:( PRUNE )>
					do : push : OUT
			do ~( %? )
		else on %! // send pending notification to parent(=driver)
			in %?:( TAKE, ? )
				do (( .., TAKE ), %? )
			else in %?:( IN, ? )
				in *r // notify next, from current rule id
					do ((( .., IN ), %(((.,?),.):%(%?:(.,?)))), %(*r:(.,?),.))
				else	do (( .., IN ), %(((.,?),.):%(%?:(.,?))))
			else in %?:( OUT, ? )	// notify current, to next rule id
				do ((( .., OUT ), %(*r:((.,?),.))), %(((.,?),.):%(%?:(.,?))))
			else in %?: ( CARRY, . )
				do ((( .., OUT ), base ), %(%?:(.,?)) )
			else in %?: OUT
				do (( .., OUT ), base )
-
		else on : pop : ? // argument = s terminating frame, or OUT
			in %?: OUT
				in : push : . // pruning
					do : pending : OUT
				else in *f: (.,?:~EOF): ~(record,*)
					do :< pending, push >:<( TAKE, %? ), OUT >
				else do : pending : OUT
				do : pop : ~.
			else in ~.: ( *r, base )
				/* set s to the successor of the schema which the current r
				   fed and which started at s's finishing frame */
				in ( %(*r,?), ?:(((schema,.),%?),.) )
					in : push : ( ., OUT ) // pruning
						do :< s, r >:< %?, %(%?:(.,?)) >
						in : push : ( ?, . )
							do : push : ( %(%?:~IN) ? %? :)
							do ~( %?, . )
						do : pop : ~.
					else
						do : push : ~.
						// output current schema's last event, if consumed
						in ( *s:(((.,~'\0'),.),.), (']',~(record,*)) )
							do :< pending, pop >:<( TAKE, %(*f:(.,?)) ), %? >
						else
							do : pending : ( OUT, %? )
							do : pop : ~.
				else // no such successor: we should have (*r,base)
					do >&" *** Error: Yak: rule '%_': "
						"subscriber has no successor ***\n": %(*r:((.,?),.))
					do :< s, pop, push >: ~.
					do ( .., ERR )
			else // back to base
				// output current schema's last event, if consumed
				in ( *s:(((.,~'\0'),.),.), (']',?:~(record,*)) )
					in : push : . // pruning
						do : pending : OUT
					else do :< pending, pop >:<( TAKE, %? ), OUT >
				else in %?: ('[',.) // completed unconsumed
					in : f : (.,?:~EOF)
						do : pending : ( CARRY, %? )
					else do : pending : OUT
				else in ( *f, ?:~EOF )
					//right-recusive case: completes on failing next frame
					do : pending : ( CARRY, %? )
				else do : pending : OUT

		// s has rule with event to-be-consumed starting this frame => pushing or popping
		else in ( (.,?:('[',*f)):~*r, *s )
			// rule has schema starting & not finishing at the same frame => pushing
			in ?: (((.,~'\0'), %?), %(?:(.,%?):~*r,*s)): ~%(?,%?)
				in : push : . // pruning
					do :< s, r, push >:< %?, %(%?:(.,?)), (*push,OUT) >
				else do : pending : ( IN, %? )
			// s has sibling starting and not finishing at s's finishing frame
			else in ?: ((.,%?), *r ): ~%(?,%?): ~*s 
				do : s : %?
			else do : pop : %?

		// s has rule with event unconsumed starting this frame => pushing or popping
		else in ( (.,?:(']',*f)):~*r, *s )
			// rule has schema starting & not finishing at the same frame => pushing
			in ?: (((.,~'\0'), %?), %(?:(.,%?):~*r,*s)): ~%(?,%?): ~%(?,('[',(*f,.)))
				in : push : . // pruning
					do :< s, r, push >:< %?, %(%?:(.,?)), (*push,OUT) >
				// output current schema's last event, providing it's not also starting
				else in *f: ~%(*s:((.,(']',?)),.)): ~(record,*)
					do :< pending, push >:<( TAKE, %(*f:(.,?)) ), %? >
				else do : pending : ( IN, %? )
			// s has sibling starting and not finishing at s's finishing frame
			else in ?: ((.,%?), *r ): ~%(?,%?): ~*s 
				// output current schema's last event, providing it's not also starting
				in : push : . // pruning
				else in *f: ~%(*s:((.,(']',?)),.)): ~(record,*)
					do : pending : ( TAKE, %(*f:(.,?)) )
				do : s : %?
			// s has sibling starting and not finishing at s's post-finishing frame, unconsumed
			else in ?: ((.,('[',(*f,.))), *r ): ~%(?,('[',(*f,.))): ~*s
				// output current schema's last event, providing it's not also starting
				in : push : . // pruning
				else in *f: ~%(*s:((.,(']',?)),.)): ~(record,*)
					do : pending : ( TAKE, %(*f:(.,?)) )
				do : s : %?
			else do : pop : %?

		else in ( *s, ?:(.,*f)) // this frame is s's last frame => popping
			// s has sibling starting and not finishing at s's finishing frame
			in ?: ((.,%?), *r ): ~%(?,%?): ~*s
				// output current schema's last event, if consumed
				in : push : . // pruning
				else in ( *s:(((.,~'\0'),.),.), (']',?:~(record,*)) )
					do : pending : ( TAKE, %(%?:(.,?)) )
				do : s : %?
			else do : pop : %?

		else in ?:( *f, . ) // there is a next frame
			// output event, unless *f is a first ']' schema frame
			in : push : . // pruning
			else in *f: (.,?): ~(record,*): ~%(*s:((.,(']',?)),.))
				do : pending : ( TAKE, %? )
			do : f : %?
		else
			do : pop : OUT

	else in : REC  // traverse record
		.f
		in : pending : ?
+		on ~( %%, ? ) < .. // on parent(=driver)'s signal
			in %<?:( CONTINUE )>
				in %?: READY
					do : f : %((record,*), . )
					do : pending : ~.
				else in ?: ( *f, . )
					do : f : %?
					do : pending : ~.
				else
					do ( .., OUT )
					do : pending : READY
			else do :< pending, %% >: ~.
-		else on : f : ( ., ? )
			do (( .., TAKE ), %? )
			do : pending : TAKE
		else on : .
			do : pending : READY
	else on : ~.
		// destroy the whole record structure, including rule
		// and schema instances - all in ONE Consensus cycle
		do ~( record )

	else on ~( record ) // next input-traversal cycle
		// reset: we do not want base rule to catch this event
		do :< record, %% >:< (record,*), IN >

	else on init
		// base rule definition must exist and have non-null schema
		in (( Rule, base ), ( Schema, ~'\0' ))
			do :< record, %% >:< (record,*), IN >
		else
			do >&"Error: Yak: base rule not found or invalid\n"
			do ( .., ERR )

/*---------------------------------------------------------------------------
|
|	yak input schema threads sub-narrative definition
|
+--------------------------------------------------------------------------*/
#include "yak-take.bm"
