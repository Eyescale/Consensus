#ifndef LCCOUNT_BM
#define LCCOUNT_BM

//---------------------------------------------------------------------------
//	LineNo
//---------------------------------------------------------------------------
: LineNo
	on ( Q ) < ..
		// input queue starts with '\n' of current line
		do { ((c,~.),0), rew }
	else on : input : ? < ..
		in rew // ignore leading '\n'
			do ~( rew )
		else in %<?:'\n'>
			in nl
//				do >"l+1c1\n"
				en increment( l )
				do ((c,~.),1)
			else
//				do >"l%$c%$\n":< %(l,?:...), %(c,?:...) >
				do nl
		else in nl
			en increment( l )
			do ((c,~.),1)
			do ~( nl )
		else
			en increment( c )
	else on :..: err < ..
		do ((( .., l ), ... ),< %(l,?:...), 'c', %(c,?:...) >)
	else on exit < ..
		do exit

.: increment( .N )
	// for each subsequence in %(N,...) not ending with 9
	per ?: %((N,.),...):(.,~9)
		// which is not itself part of a sequence ending with not 9
		in ~.: %((%?,.), ... ):( ., ~9 )
			// replace last subsequence's digit with digit successor in dial
			// Assumption: No (digit,(.,.)) instance exists other than in dial
			do ( (( %?:(?,.), ~. ), %( %(%?:(.,?)), (?,.) )) | ?:%(%?,?:...) (%|,0):| )
	else in ?: N // either all %(N,...) digits are 9 or N has no digit association
		// replace N's all successor digits with 0, preceded by 1
		do ((( %?, ~. ), 1 ) | ?:%(%?,?:...) (%|,0):| )

#endif // LCCOUNT_BM
