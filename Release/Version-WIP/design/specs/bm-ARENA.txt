Use Cases
	We allow the following expressions, corresponding to the creation
	and usage of the following types of shared entities

		1. shared string entities (ste) type

			do "any text"
			do : expr : "any text"
			in ?: "any text"

		   : "any text" // narrative definition

		2. unnamed base entities (ube) type

			do !! | {_}
			do : expr : !!
			do : expr : !! | {_}

	Reference to the thus created unnamed and string entities can
	be shared (via EENO and carry and modulo local representation)
	across all running CNDB's, which involves a globally accessible
	CNDB Shared Arena memory space to centralize these entities.

	Note that, concerning shared string entities,

	1. None of the following expressions are supported

		in ~.: "_"
		on "_"
		on ?: "_"
		on ~( "_" )

	2. We do allow sub-narrative definition

		: "any text"

	the latter being the reason why we introduced BTree key encoding
	and replacement (in the text) of these entities, as we don't want
	to strcmp the whole story's list of string protos every frame to
	satisfy a do_enable()

CNInstance vs. CNEntity
	a CNInstance is a CNEntity in the form
		e:( sub:(source,target), as_sub )
	where e verifies
		cnIsIdentifier(e)
			iff e:(( $ , e ), as_sub ) i.e. e->sub[1]==e
		cnIsShared(e)
		 	iff e:((NULL,key), as_sub ) i.e. !e->sub[0]
		cnIsProxy(e)
			iff e:((connection:(this,that),NULL), as_sub )
			i.e. !e->sub[1]
		cnIsSelf(e)
			iff e:((connection:(NULL,this),NULL), as_sub )
			i.e. ( !e->sub[1] && !e->sub[0]->sub[0] )
	failing which
		e is the Relationship Instance connecting two entities

CNDB Shared Entities
	a CNDB Shared Arena entity is a CNDB base entity in the form
		e:( NULL, key:uint[2] )
		  ^	  ^-------------------- shared arena part
		   ---------------------------- db-specific
	where
		e->key:=(unsigned int *) e->sub[ 1 ]
		e->key[0]:=type  // '$' for string; '!' for ube
		e->key[1]:=index // the corresponding Shared Arena BTree index

CNDB Shared Arena
	The CNDB Shared Arena is a globally accessible (B%-process-wide) pair
	of binary trees

		DBSharedArena:[ BTree('$'), BTree('!') ]

	mapping, for each CNDB Shared Entities in the B% process, the key
	representing that entity to its value, as follow:

		('$',index) to [ string, ref:{[db,e]} ]	// string shared entity
		('!',index) to ref:{[db,e]} // unnamed base entity (ube)

Implementation notes
	. Nothing in db_lookup/db_match...() addresses shared entities.
	  This is because - as per this version - either:
		these are strings => hard-coded by parser
	    or	these are unnamed => only accessed by reference,
		from RV or as as_sub[] from other entities
	. There is no btreeRemove() interface => once allocated, btree
	  leaves *remain* in btrees, even with their ref-registry empty,
	  until bm_arena_exit() is called.
	  This can be easily extended, by maintaining a list of free
	  indexes and freeing the leave or even whole sub-trees when
	  the entity is completely unref'd
	. The current implementation limits the number of shared entities
	  to the 32-bit range (per type), but again this could be extended
	  by reducing the number of bits reserved for type

