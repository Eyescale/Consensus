//---------------------------------------------------------------------------
//	External specifications
//---------------------------------------------------------------------------
Objective
	support ?:(_)(_) and ?:(_){_} in DO expressions

About
	Loop usage is restricted to either (see parser.c)
	. directly after the opening '|' of a pipe sequence
	. generally if !(LEVEL|INFORMED|byref)
	Syntax
		?:(_)(_) 	alt.	!?:(_)(_)
		?:(_){_}		!?:(_){_}
	where
		the second (_) resp. {_} can be of the form
			 (_|_) resp. {..., _|_, ...}
		where
			_ can be of any form, including loop
			modulo above-mentioned restrictions,
			or (_) or {_}

	The newborn flag (_)^ conditions the execution of subsequent
	!?:(_) loops, which as all loops can take place either
		1. on PIPE, e.g.
			do !! | ?:(_)(_) // UBE
			do ( _ | ?:(_)(_) )
			do { _ | ?:(_)(_) }
		2. at base level, e.g.
			do ?:(_)(_)
		3. at CARRY base level, e.g.
			do !! carry( ?:(_)(_) )
		4. at SET base level, e.g.
			do { ?:(_)(_) }

	The newborn flag is pushed resp. popped at the beginning
	resp. end of each PIPE and SET sequences, with new value
	initially unpecified.
	When the current newborn flag value is unspecified, then
	the stacked flag's value is tested [...] until a specified
	value is found - or, if not found, considered -1

	Notes:
	. parser could set and test NEWBORN prior to !?:(_)

Design
    Loop Bgn
	in instantiate.c: wildcard_CB
		on "?:", push data->loop:{ LoopData }
	where
		LoopData:{
			struct { void *level; char *p; } *info;
			listItem *rv; } // {[ %!, %? ]}
	and
		loop->info->level = *traverse_data->stack
		loop->info->p = position *past* ?:(_)_
		loop->rv holds ?:(_) results         ^

    Loop End
	in traverse.c: We need to catch either
		traverse_data->done==1 => outer loop
		')' or '}' => replace
			CB_CloseCB /
			CB_EndSetCB	f_pop( stack, 0 )
					f_set( INFORMED )
					p++; break;
		    with
			CB_CloseCB /
			CB_EndSetCB	f_pop( stack, 0 )
			CB_LoopCB	f_set( INFORMED )
					p++; break;
	in instantiate.c: loop_CB
	if (( data->loop ) && p[1]!='|' ) {
		LoopData *loop = data->loop->ptr;
		if ( *traverse_data->stack==loop->info->level ) {
			Pair *rv = popListItem( &loop->rv );
			if (( rv )) {
				bm_reset_mark( data->ctx, "?", rv );
				_continue( loop->info->p ) }
			else {
				bm_pop_mark( data->ctx, "?" );
				popListItem( &data->loop ); } } }

	Notes
	. loop_CB must be a callback because it accesses data->ctx
	. pipe sequence can be |_ or |(_) or |{_} possibly following
		?:(_)(_)|...
			^--------- same level
	  in which case possibly at base level - in SET|CARRY
		=> possibly after traverse_data->done==1
		=> outer loop to be created

//---------------------------------------------------------------------------
//	Internal specifications
//---------------------------------------------------------------------------
Objective
	implement ?:(_)_
	implement !?:(_)_
		usage allowed inside {_} regardless of pipe, which means
		handling NULL results as errors (or at least ignore them)
		Note: close_CB currently handles
			. data->sub[1]==NULL as (expr,~.)
			. NULL entity as '.'
	implement (_)^ aka. newborn flag
		the newborn flag is pushed and popped at the beginning resp.
		end of each pipe sequence

InstantiateData: must have
	struct { int current; listItem *stack; } newborn;
	struct {
		struct { void *level; char *p; } *info;
		listItem *rv; // {[ %!, %? ]}
		} *loop;

instantiate.c: wildcard_CB - loop bgn
    in traversal_template.h:
		case '!':
			if ( p[1]=='!' ) ...
			else {
	CB_EMarkCharacterCB	f_set( INFORMED )
				p++; }
			break;
		case '?':
			if is_f( INFORMED ) ...
			else {
	CB_WildCardCB		if ( !strncmp( p+1, ":...", 4 ) )
					p+=4;
				f_set( INFORMED ) }
			p++; break;
		case '.':
			if ( mode&(SUB_EXPR|FILTERED) ) {
	CB_WildCardCB		... // instantiate mode is INFORMED|LITERAL
			else {
	CB_WildCardCB		f_set( INFORMED ) // '.' alone
				p++; break; }
			break;

    in instantiate_traversal.h
	BMWildCardCB		wildcard_CB
	BMEMarkCharacterCB	wildcard_CB	// NEW

    in instantiate.c
	case_( wildcard_CB )
		union { void *ptr; int value; } icast;
		listItem *results;
		switch ( *p ) {
		case '!':
			// see below newborn_authorize()
			if ( !newborn_authorized( data ) ) {
				p = p_prune( PRUNE_TERM, p );
				p = p_prune( PRUNE_TERM, p );
				_continue( p ); }
			p++; // no break
		case '?':
			// like bm_scan(), but results pushable as "?"
			results = bm_simili-scan( p, data->ctx );
			p = p_prune( PRUNE_TERM, p );
			if (( results )) {
				listItem *level = *traverse_data->stack;
				// invoke bm_push_mark( ctx, "?", results )
				// iff results not singleton
				push_loop( data, results, p, level ); }
				// does not set INFORMED
				_continue( p ) }
			else p = p_prune( PRUNE_TERM, p ); }
			break;
		case '.':
			data->sub[ NDX ] = newItem( NULL ); }
		_break

    with
	static inline int newborn_authorized( InstantiateData *data ) {
		listItem *stack = data->newborn.stack;
		return ((stack) && cast_i(stack->ptr)); }

instantiate.c: loop_CB - loop end
    in traversal_template.h
		case '}':
			...
	CB_EndSetCB	f_pop( stack, 0 )
			p++; // move past '}'
	CB_LoopCB	f_set( INFORMED )
			p++; break;

		case ')':
			...
	CB_CloseCB	f_pop( stack, 0 )
			p++; // move past ')'
	CB_LoopCB	f_set( INFORMED )
			if ( *p=='^' ) {
	CB_NewBornCB		p++; }
			break;

    in instantiate_traversal.h
	BMLoopCB	loop_CB		// NEW
	BMNewBornCB	newborn_CB	// NEW

    in instantiate.c
	case_( loop_CB )
		// called past ) and } => test for a respin
		if (( data->loop ) && *p!='|' ) {
			LoopData *loop = data->loop->ptr;
			if ( *traverse_data->stack==loop->info->level ) {
				Pair *rv = popListItem( &loop->rv );
				if (( rv )) {
					bm_reset_mark( data->ctx, "?", rv );
					_continue( loop->info->p ) }
				else {
					bm_pop_mark( data->ctx, "?" );
					loop_pop( &data->loop ); } } }
		_break

	case_( newborn_CB )
		switch ( data->newborn.current ) {
		case 1: break;
		default:
			if ( db_has_newborn( data->sub[NDX], data->db ) )
				data->newborn.current = 1;
			else {	data->newborn.current = -1; } }
		_break

instantiate.c: bgn_pipe_CB and end_pipe_CB - push/pop newborn flag
	case_( bgn_pipe_CB )
		add_item( &data->newborn.stack, data->newborn.current );
		data->newborn.current = 0; // UNSPECIFIED
		_break
	case_( end_pipe_CB )
	    	data->newborn.current = pop_item( &data->newborn->stack );
		_break

