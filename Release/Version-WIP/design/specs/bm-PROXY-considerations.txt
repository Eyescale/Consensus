Synopsis
	CNCell interconnection and CNDB proxy considerations

Overview
	We have
		CNCell:CNEntity:( [ entry, carry ], ctx:Registry )

	where
		. cell->ctx->lookupEntry( "%" ) is the cell's CNDB
		. this->sub[ 0 ]-> sub[ 1 ] contains the cell's offspring,
		  that is:
		  cells which this cell produced upon NEW (!!) narrative
		  occurrences - ready to hatch: see program.c:cnUpdate()
		. this->as_sub[ 0 ] contains the list of cell's connections

Definitions
	. A cell connection is a CNEntity in the form ( this, that ) where
	  this and that are two CNCell entities

	. A CNDB proxy is a CNInstance - that is: a CNEntity pertaining to
	  a Consensus CNDB - in the form

		(( this, that ), NULL )

	  where
	  	this and that are two CNCell entities

	. CNDB proxies are treated as CNDB Base Entities, owing to the fact
	  that one of their subs is NULL.
	  They are unnamed, and will show in output results as @@@
	  In general, releasing a CNDB proxy entity will release the underlying
	  connection - see below exceptions in the cases of the Narrative
	  parent .. and self %% Register Variables

	. The active @ RegistryEntry contains the cell's active connections,
	  that is: the list of CNDB proxies to be used in EENO

	  Note that %@ will not be made public in this release (Version-2.0)

Narrative parent Register Variable ..

	The Narrative parent Register Variable .. is either NULL or set to the
	proxy of the cell's parent connection. Both connection and proxy were
	created from within the parent and kept active unless the parent
	unsubscribed, at instantiation - see bm_conceive()

    Caveats
	. The Narrative parent Register Variable .. supports all regular proxy
	  usages (assignment, activation, deactivation, etc.)
	. do .. ~< or any expression to that effect deactivates the connection
	. do .. @< or any expression to that effect [re]activates the connection
	. do ~( .. ) or any expression to that effect will deprecate the proxy
	  entity ((this,parent),NULL) and therefore all its ascendants. It will
	  also deactivate the underlying (this,parent) connection. However:
	    1. Neither the entity itself nor the connection will be released
	    2. The Narrative parent Register Variable usage remains unaffected

Narrative self Register Variable %%

	Let us consider the following Use Case

		on : variable : ? < *src
			do : variable : %?

	Since proxies can be assigned to variables, the current cell may end up
	having to assign a proxy to itself to its own variable.

	To this effect we use the ((NULL,this),NULL) special proxy, which does
	not represent any activable connection - in other words: although we do
	support %% to represent (.,this) in other cells, we do not support

		on expression < %%

	or any expression leading to that effect, which would be equivalent to

		on expression

	but would also have to be explicitely discarded, if so desired, in EENO

		on expression < ~%%

	Note: implementation-wise, the above expressions are in fact supported,
	but, %% not being activable, the first one will never yield anything, and
	the last one will check all active connections.

    Caveats
	. When used for comparison - cf. query.c:match() - %% simply means
	  that the tested entity should verify ((.,this),NULL)
	. do %% @< or any expression to that effect does nothing
	. do %% ~< or any expression to that effect does nothing
	. do ~( %% ) or any expression to that effect will deprecate the proxy
	  entity ((NULL,this),NULL) and therefore all its ascendants. However:
	    1. The entity itself will not be released
	    2. The Narrative self Register Variable usage remains unaffected
	    3. No "self-connecting" capability of the current cell will be
	       affected, since these are built-in.

