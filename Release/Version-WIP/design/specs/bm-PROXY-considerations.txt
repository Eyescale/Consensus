Synopsis
	CNCell interconnection and CNDB proxy considerations

Overview
	We have
		CNCell:[ entry, ctx:[ this:CNEntity, registry ] ]

	where
		. this->sub[ 0 ] is the cell's CNDB
		. this->sub[ 1 ] contains the cell's offspring - that is:
		  cells which this cell produced upon NEW (!!) narrative
		  occurrences - ready to hatch: see program.c:cnUpdate()
		. this->as_sub[ 0 ] contains the list of cell's connections

Definitions
	. A cell connection is a CNEntity in the form ( this, that ) where
	  this and that are two cell->ctx->this CNEntity

	. A CNDB proxy is a CNInstance - that is: a CNEntity pertaining to
	  a Consensus CNDB - in the form

		(( this, that ), NULL )

	  where
	  	this and that are two cell->ctx->this CNEntity

	. CNDB proxies are treated as CNDB Base Entities, owing to the fact
	  that one of their subs is NULL.
	  They are unnamed, and will show in output results as @@@

	. The active @ RegistryEntry contains the cell's active connections,
	  that is: the list of CNDB proxies to be used in EENO.

	  Note that %@ will not be made public in this release (Version-2.0)

Narrative parent Register Variable ..

	The Narrative parent Register Variable .. is either NULL or set to the
	proxy of the cell's parent connection. Both connection and proxy were
	created by the parent if the parent did subscribe, at instantiation.

    Caveats
	. The Narrative parent Register Variable .. supports all regular proxy
	  usages (assignment, activation, deactivation, etc.) release excepted.

Narrative self Register Variable %%

	Let us consider the following Use Case

		on : variable : ? < *src
			do : variable : %?

	Since proxies can be assigned to variables, the current cell may end up
	having to assign a proxy to itself to its own variable.

	Therefore it is necessary to create ((this,this),NULL) proxy, although
	this particular proxy does not represent any activable connection - in
	other words: although we do support %% to represent (.,this) in other
	cells, we do not support

		on expression < %%

	or any expression leading to that effect, which would be equivalent to

		on expression

	but would also have to be explicitely discarded, if so desired, in EENO

		on expression < ~%%

	Note: implementation-wise, the above expressions are in fact supported,
	but, %% not being activable, the first one will never yield anything, and
	the last one will check all active connections.

    Caveats
	. When used for comparison - cf. query.c:match() - %% simply means
	  that the tested entity should verify ((.,this),NULL)

	. When %% is used in instantiation - cf. instantiate.c - we must
	  create and manifest ((this,this),NULL) if it does not exist.

	. do @< %% or any expression to that effect does nothing
	. do ~< %% or any expression to that effect does nothing
	. do ~( %% ) or any expression to that effect will release both
	  connection (this,this) and proxy ((this,this),NULL)

	  Note that this does NOT affect any "self-connecting" capability of
	  the current cell, since it possesses none.


