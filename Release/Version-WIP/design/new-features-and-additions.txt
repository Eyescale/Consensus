Name
	Consensus B% Version-2.0 File Format Interface - New Features

Synopsis
    Changes
	. The name of the Narrative pipe Register Variable was changed
	  from %! in Version-1.x to %| in Version-2.0

	. The following variable assignment syntax is allowed

		in/on/do : variable, value

	  as this is how, as of Version-2.0, the assignment occurrence is
	  represented internally, and how it will show in story output.

	  Note however that neither variable nor value can be filtered
	  so as to be consistent with the alternative (preferred) syntax

		in/on/do : variable : value
	  
	. Concerning the Narrative %? and %! Register Variables, the rules
	  of assignment are as follow:

	  When the query signus ? is included in the variable part of
	  the assignment occurrence, then the %? mark register variable
	  holds the corresponding query result, if any, and the %!
	  register variable holds the instance corresponding to the value
	  part of the query result.

	  Conversely, when the query signus ? is included in the value
	  part of the assignment occurrence, then the %? mark register
	  variable holds the corresponding query result, if any, and
	  %! holds the instance corresponding to the variable part of
	  the query result.

    Additions
	The following features were added to Version-1.2 features - modulo
	changes listed above

	    	Feature Name			Expression			Comment

	Instantiate			do !! Narrative ( ... )
					do !! Narrative ( ... ) @<
					do !! Narrative ( ... ) ~<

					do : handle : !! Narrative ( ... )
					do : handle : !! Narrative ( ... ) @<
					do : handle : !! Narrative ( ... ) ~<

	Subscribe			do expression @<
					do : handle : expression @<

	Unsubscribe			do expression ~<
					do : handle : expression ~<

	Pause				do :<				useful for debugging

	External Event Narrative	on event < src
	Occurrence (EENO)

	EENO Register Variables		%<
					%<?>
					%<!>
					%<?:sub>			sub is a B% valid expression whose terms
					%<!:sub>			are a combination of
									 . B% valid identifiers
									 . the wildcard signus .
									 . a single optional query signus ?
									 . the negation signus ~
	this Register Variable		%%

	parent Register Variable	..

Description
    1. Instantiate

	CNCell instances are created upon either one of the following parent
	cell's narrative operations:

		do !! Narrative ( ... )
		do !! Narrative ( ... ) @<
		do !! Narrative ( ... ) ~<

		do : handle : !! Narrative ( ... )
		do : handle : !! Narrative ( ... ) @<
		do : handle : !! Narrative ( ... ) ~<

	The instantiated cell's init condition are specified within the
	parentheses - in lieu of the ellipsis symbol - as a list of comma-
	and/or newline- separated expressions. Referencing terms, such as

		register variable
		expression:filter
		%( expression )
		*expression

	are allowed in these expressions. These will be dereferenced within
	the parent cell's CNDB prior to the resulting expression's being
	replicated into the new cell's CNDB.

	The second occurrence within each of these subsets is equivalent to
	the first (default) occurrence, whereby both parent and instantiated
	cells subscribe to each other upon instantiation. This enables them
	to track each other's events (a.k.a. changes) via Narrative EENO.

	In addition to creating a CNCell instance, the second subset of
	above-listed occurrences allows a proxy of the instantiated connection
	to be assigned to a local CNDB handle - expression - if the connection
	was instantiated.

	The last occurrence within both subsets denotes an occurrence where
	parent unsubscribes upon instantiation from its instantiated cell,
	after which neither parent nor child are able to track each other's
	changes - until potentially future explicit connection.

	The very last occurrence in the above list releases and unassigns the
	connection upon instantiation, which leaves the (*,handle) relationship
	instance created but with nothing to show for it - not even via
	on ~((*,handle),?) ... It is, however, manifested.

    2. Subscribe

	CNCell instantiation involves instantiating connections, which can be
	handled and stored as proxies within a cell's CNDB.

	Proxies can also be communicated from one cell to another, thereby
	allowing a cell to subscribe to another, unrelated cell, provided only
	that it is passed a proxy instance of a connection to that cell by one
	of its connections - or by its parent, at instantiation.

	See example usage in the Narrative this Register Variable section below.

    3. Unsubscribe

	Same as above, with unsubscribe from instead of subscribe to.

    4. Pause

	Execution will resume upon the User's pressing any key on the keyboard

    5. External Event Narrative Occurrence (EENO)

	External Event Narrative Occurrences (EENO) are occurrences in the form

			on event < src

		where
			event and src are expressions

	Any referencing term found in the EENO event and src expressions, namely

		*identifier
		.identifier
		~identifier
		*( expression )
		%( expression )
		.( expression )
		~( expression )
		expression:filter

	as well as either one of the following register variable names

		.. %? %! %| %< %<?> %<!> %<?:sub> %<!:sub>

	will be dereferenced within the narrative instance's own cell's CNDB
	PRIOR to the query's being launched

	Such is the limitation imposed, by design, to the Consensus B% inter-
	cell communication protocol, in that it allows only to query manifested
	changes - and not one another's internal condition.

    6. EENO Register Variables

	The EENO Register Variables %<?> and %<!> allow subsequent references
	to the EENO query results to be made by the narrative, using

		%<?>	to represent event = first match
		%<!>	to represent the complementary match (variable or value)
			in case of assignment expression - if marked
		%<	to represent src = proxy to the corresponding connection

	The rules of assignment described in the Changes section of this document
	apply to the %<?> and %<!> Register Variables, where the additional EENO
	Register Variable %< holds the proxy instance corresponding to the query
	result, if any.

	Note here that the occurrence expression

		on : variable : value < ?

	will yield the following results, if any

		%< 	matching source (proxy)
		%<?>	matching variable
		%<!>	matching value

	whereas the occurrence expression

		on : variable : ? < .

	will yield the following results, if any

		%< 	matching source (proxy)
		%<?>	matching value
		%<!>	matching variable

	Note that when found in occurrences the EENOV register variables %<?> %<!>
	will be dereferenced inside the local CNDB prior to the occurrence query
	being launched, with the following exceptions:

		in %<?:sub>	// as-is
		in %<!:sub>	// as-is

	where the sub expression is evaluated directly in the source CNDB, and

		do expression

	where the %<?> and %<!> expression terms, if any are present as-is (that
	is: unfiltered etc.) will be converted locally, modulo instantiation.

    7. Narrative this Register Variable

	The Narrative this Register Variable %% allows a proxy to the narrative's
	current context's this CNInstance to be used for comparison - e.g.

		on : connection : ? < .
			// one of my sources just registered a new connection
			in %<?>: %%
				// that connection is me
			else in %<?>: .
				// already subscribed
			else
				// subscribe to my source's new connection
				do @< %<?>

    8. Narrative parent Register Variable

	Likewise the Narrative parent Register Variable .. references a proxy to
	the narrative's parent cell - provided parent did not unsubscribe upon
	instantiation.

