//===========================================================================
//	cf https://www.lysator.liu.se/c/ANSI-C-grammar-y.html
//===========================================================================

translation_unit
	%translation_unit %external_declaration
	external_declaration
		declaration
			%declaration_specifiers %init_declarator_list ;
			%declaration_specifiers ;
		function_definition
			%declaration_specifiers %declarator %declaration_list %compound_statement
			%declaration_specifiers %declarator %compound_statement
			%declarator %declaration_list %compound_statement
			%declarator %compound_statement

//===========================================================================
//	declaration
//===========================================================================

declaration_list
	%declaration
	%declaration_list %declaration

declaration_specifiers
	storage_class_specifier
		TYPEDEF
		EXTERN
		STATIC
		AUTO
		REGISTER
	type_specifier
		VOID
		CHAR
		SHORT
		INT
		LONG
		FLOAT
		DOUBLE
		SIGNED
		UNSIGNED
		TYPE_NAME
		struct_specifier
			STRUCT IDENTIFIER { %struct_declaration_list }
			STRUCT { %struct_declaration_list }
			STRUCT IDENTIFIER
		union_specifier
			UNION IDENTIFIER { %struct_declaration_list }
			UNION { %struct_declaration_list }
			UNION IDENTIFIER
		enum_specifier
			ENUM { %enumerator_list }
			ENUM IDENTIFIER { %enumerator_list }
			ENUM IDENTIFIER
	type_qualifier
		CONST
		VOLATILE
	%storage_class_specifier %declaration_specifiers
	%type_specifier %declaration_specifiers
	%type_qualifier %declaration_specifiers

struct_declaration_list
	struct_declaration
		%specifier_qualifier_list %struct_declarator_list ;
	%struct_declaration_list %struct_declaration

specifier_qualifier_list
	%type_specifier
	%type_specifier %specifier_qualifier_list
	%type_qualifier
	%type_qualifier %specifier_qualifier_list

struct_declarator_list
	struct_declarator
		declarator
			%pointer %direct_declarator
			direct_declarator
				IDENTIFIER
				( %declarator )
				%direct_declarator [ %constant_expression ]
				%direct_declarator [ ]
				%direct_declarator ( %parameter_type_list )
				%direct_declarator ( %identifier_list )
				%direct_declarator ( )
		: %constant_expression
		%declarator : %constant_expression
	%struct_declarator_list , %struct_declarator

pointer
	*
	* %pointer
	* %type_qualifier_list
	* %type_qualifier_list %pointer

enumerator_list
	enumerator
		IDENTIFIER
		IDENTIFIER = %constant_expression
	%enumerator_list , %enumerator

init_declarator_list
	%init_declarator_list , %init_declarator
	init_declarator
		%declarator
		%declarator = %initializer

initializer
	{ %initializer_list }
	{ %initializer_list , }
	%assignment_expression

initializer_list
	%initializer
	%initializer_list , %initializer

parameter_type_list
	parameter_list
		parameter_declaration
			%declaration_specifiers %declarator
			%declaration_specifiers %abstract_declarator
			%declaration_specifiers
		%parameter_list , %parameter_declaration
	%parameter_list , ELLIPSIS

abstract_declarator
	%pointer
	direct_abstract_declarator
		( %abstract_declarator )
		[ ]
		[ %constant_expression ]
		%direct_abstract_declarator [ ]
		%direct_abstract_declarator [ %constant_expression ]
		( )
		( %parameter_type_list )
		%direct_abstract_declarator ( )
		%direct_abstract_declarator ( %parameter_type_list )
	%pointer %direct_abstract_declarator

type_qualifier_list
	%type_qualifier
	%type_qualifier_list %type_qualifier

identifier_list
	IDENTIFIER
	identifier_list , IDENTIFIER

constant_expression
	%conditional_expression

//===========================================================================
//	expression
//===========================================================================

assignment_expression
	%conditional_expression
	%unary_expression %assignment_operator %assignment_expression

assignment_operator
	=
	MUL_ASSIGN
	DIV_ASSIGN
	MOD_ASSIGN
	ADD_ASSIGN
	SUB_ASSIGN
	LEFT_ASSIGN
	RIGHT_ASSIGN
	AND_ASSIGN
	XOR_ASSIGN
	OR_ASSIGN

unary_expression
	INC_OP %unary_expression
	DEC_OP %unary_expression
	%unary_operator %cast_expression
	SIZEOF %unary_expression
	SIZEOF ( %type_name )
	postfix_expression
		primary_expression
			IDENTIFIER
			CONSTANT
			STRING_LITERAL
			( %expression )
		%postfix_expression [ %expression ]
		%postfix_expression ( )
		%postfix_expression ( %argument_expression_list )
		%postfix_expression . IDENTIFIER
		%postfix_expression PTR_OP IDENTIFIER
		%postfix_expression INC_OP
		%postfix_expression DEC_OP

unary_operator
	&
	*
	+
	-
	~
	!

cast_expression
	( %type_name ) %cast_expression
	%unary_expression

type_name
	%specifier_qualifier_list
	%specifier_qualifier_list %abstract_declarator

expression
	%assignment_expression
	%expression , %assignment_expression

conditional_expression
	%logical_or_expression ? %expression : %conditional_expression
	logical_or_expression
		%logical_or_expression OR_OP %logical_and_expression
		logical_and_expression
			%logical_and_expression AND_OP %inclusive_or_expression
			inclusive_or_expression
				%inclusive_or_expression | %exclusive_or_expression
				exclusive_or_expression
					%exclusive_or_expression ^ %and_expression
					and_expression
						%and_expression & %equality_expression
						equality_expression
							%equality_expression EQ_OP %relational_expression
							%equality_expression NE_OP %relational_expression
							relational_expression
								%relational_expression < %shift_expression
								%relational_expression > %shift_expression
								%relational_expression LE_OP %shift_expression
								%relational_expression GE_OP %shift_expression
								%shift_expression

shift_expression
	%shift_expression LEFT_OP %additive_expression
	%shift_expression RIGHT_OP %additive_expression
	additive_expression
		%additive_expression + %multiplicative_expression
		%additive_expression - %multiplicative_expression
		multiplicative_expression
				%multiplicative_expression * %cast_expression
				%multiplicative_expression / %cast_expression
				%multiplicative_expression % %cast_expression
				%cast_expression
					
//===========================================================================
//	statement
//===========================================================================

compound_statement
	{ }
	{ %statement_list }
	{ %declaration_list }
	{ %declaration_list %statement_list }

statement_list
	%statement_list %statement
	statement
		%compound_statement
		labeled_statement
			IDENTIFIER : %statement
			CASE %constant_expression : %statement
			DEFAULT : %statement
		expression_statement
			;
			%expression ;
		selection_statement
			IF ( %expression ) %statement
			IF ( %expression ) %statement ELSE %statement
			SWITCH ( %expression ) %statement
		iteration_statement
			WHILE ( %expression ) %statement
			DO %statement WHILE ( %expression ) ;
			FOR ( %expression_statement %expression_statement ) %statement
			FOR ( %expression_statement %expression_statement %expression ) %statement
		jump_statement
			GOTO IDENTIFIER ;
			CONTINUE ;
			BREAK ;
			RETURN ;
			RETURN expression ;

