
SYNOPSIS

	This document details the narrative.c/parser.c - resp. readStory()/bm_parse() -
	story creation interface.

CONTENTS
	Essentially bm-parse is always one CNNarrative [and CNOccurrence] ahead.

	When a new narrative definition is announced in the file being parsed, then

		1. bm_parse() calls proto_set( narrative, story, identifier ), which

		   1.1. verifies that the passed identifier is not already registered
		        into the passed story ; and if not, then

		   1.2. assigns the passed identifier [or NULL if identifier is NULL]
			to the passed narrative's s proto, and returns 1

		   Otherwise, that is: if the passed identifier is already registered
		   into Story, then proto_set() returns 0
		  
	If 1 was returned, then

		When the current narrative definition is completed, then

			2. bm_parse() calls story_add( story, narrative ), which

			   2.1. effectively registers the passed narrative into story

			   2.2. returns 1

	Note that step 1. can be omitted once, as the very first narrative is being
	defined, in which case the proto of the narrative passed to story_add() is NULL

DETAILS
	We want Story:Registry{[ name, Narrative:{[ proto, root ]} ]}

	. in proto_set( narrative, story, proto ) we have three cases

		1. proto: NULL
		2. proto: identifier
		3. proto: .identifier:expression - or :( expression ) in Version-1.1,
		   which in Version-1.2 will default to proto: .this:( expression )

	  1. Very first narrative:
	     verify that story empty; then
	     if it is {
			narrative->proto = NULL;  // which it should already be
			return 1;
	     } else return 0;
	  2. if ( !storyLookup( identifier ) ) {
			narrative->proto = identifier;
			return 1;
	     } else return 0;
	  3. We don't check anything further:
		narrative->proto = proto;
		return 1;

	. in story_add( story, narrative ) we have the same three cases
		1. narrative->proto: NULL
		2. narrative->proto: identifier
		3. narrative->proto: .identifier:expression - resp. ( expression )

	  1. Very first narrative:
	     create entry [ "", newItem( narrative ) ] in story
	  2. reorder narrative list to current (= last) story entry
	     create entry [ identifier, newItem( narrative ) ] in story
	  3. add narrative as listItem to current story entry

	=> current story entry must be passed as well, for which bm_parse()
	   passes the whole BMParseData* block to these functions

