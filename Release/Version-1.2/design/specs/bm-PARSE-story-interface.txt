
CHALLENGE

	The challenge was to centralize the parsing mechanism between the code used
	to 1) read a Story file 2) load an ini file, and 3) read input from stdin.

	For this we introduced the macros CND_if_ and CND_ifn[*] which act like
	#ifdef/#endif except dynamically, and allow to keep everything together
	while providing alternative execution paths.

	*See the ./include/parser_private.h file for more information

ALTERNATIVE
	Provided that we split bm_parse into the separate parser routines

		parse_from_base
		parse_from_expr

	Then in bm_read we could have

		bm_parser_init( ... "base" ... )
		int read_state = BASE;
		do {
			int event = cnParserGetc( &parser );
			switch ( read_state ) {
			case BASE:
				parser.state = parse_from_base( event, &parser, mode );
				if ( !strcmp( parser.state, "" ) || parser.errnum )
					break;
				if ( !strcmp( parser.state, "expr" ) )
					read_state = EXPR;
				break;
			case EXPR:
				parser.state = parse_from_expr( event, &parser, mode );
				if ( !strcmp( parser.state, "" ) || parser.errnum )
					break;
				if ( !strcmp( parser.state, "base" ) )
					read_state = BASE;
			}
		} while ( strcmp( parser.state, "" ) );

		if (!( mode==CN_INSTANCE ))
			fclose( file );
		return bm_read_exit( &parser );
	}

ISSUE
	For bm_read to catch all parse_from_xxx transitions, REENTER would need to be
	handled in cnParserGetc( &parser ), instead of the CNParserBegin / CNParserEnd
	macros as it is now => last event would have to be stored in parser

	This would be nice to have, but is it really necessary right now?

DECISION
	The above-mentioned macros combined with the parse_CB mechanism allow us to
	keep the code centralized without performance penalty, and to keep CNNarrative
	operations localized in read.c


