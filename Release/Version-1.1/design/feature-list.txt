
Execution Model / Narrative Registry
	The specs are a pre-requisite for most of the planned features implementation below.

File Format extensions
	1. line continuation	\  
		like this	// note that there can be space after backslash
	2. support % and * as standalone expression terms
		currently * is not supported as last character in expression (why?)
	3. single-character identifier entities - e.g. '\0', '(', '\xhh...' etc.
		cf. https://en.wikipedia.org/wiki/Escape_sequences_in_C
		=> modify input, output and expression traversal
	4. registry variable %?
	4.1. pre-requisite: execution model / narrative registry (specs)
	4.2.
		on ?: expression
		in ?: expression
		%?
	5. narrative definition
	5.1. pre-requisite: execution model / narrative registry (specs)
	5.2. modify readNarrative to generate list of narratives, instead of one
	5.3.
		: prototype	// Q: what if base narrative? can I have %argv there?
		this		// Q: what if base narrative?
		%arg		// replace later occurrences of %arg with %(this:exponent)
				// Q: what if base narrative?
		.variable	// replace later occurrence of variable with (this,variable)
				// Q: what if base narrative?
		%( )		// declaration: does nothing
		do .( expr )	// same as do ( this, (expr) )
				// Q: what if base narrative?

		=> Q: what if base narrative?

Input/Output interface
		do expression : "format" <	// input
		do > "format": expression	// output

	Where format can hold
	Input
		%_	read and instantiate the next recognizable identifier
			or relationship instances identifiers, discarding
			unquoted separators and #...\n sequences on the way.
		%c	read and instantiate the single character identifiers
			corresponding to the next byte read from stdin.
		%%	represents %
	Output
		%_	output the identifier(s) of the entities matching the
			expression passed as argument. All single character
			identifiers are output in quotes.
		%s	output the identifier(s) of the entities matching the
			expression passed as argument. Base instance identifiers
			are output without quotes. Relationship instances
			are backslashed unless they are grouped, in which case
			the group's opening '{' is backslashed.
		%%	represents %

	"format" can also be omitted, which defaults to "%_"

	Notes
	. Eventually we would like to support e.g.
		do > "format": { expression1, expression2, ... }
		do { expression1, expression2, ... }: "format" <
	  but for now only one expression argument is accepted.
	. Q: how to convert a ( list, * ) of single character identifier entities
	     into a standalone entity - aka. B% literal? could it be by piping output
	     into input? // Out of scope

