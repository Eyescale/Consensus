
Execution Model / Narrative Registry
	The specs are a pre-requisite for most of the planned features implementation below.

File Format extensions
	1. line continuation	\  
		like this	// note that there can be space after backslash
	2. support % and * as standalone expression terms
		currently * is not supported as last character in expression (why?)
	3. single-character identifier entities - e.g. '\0', '(', '\xhh...' etc.
		cf. https://en.wikipedia.org/wiki/Escape_sequences_in_C
		=> modify input, output and expression traversal
	4. registry variable %?
	4.1. pre-requisite: execution model / narrative registry (specs)
	4.2.
		on ?: expression
		in ?: expression
		%?
	5. narrative definition
	5.1. pre-requisite: execution model / narrative registry (specs)
	5.2. modify readNarrative to generate list of narratives, instead of one
	5.3.
		: prototype	// Q: what if base narrative? can I have %argv there?
		this		// Q: what if base narrative?
		%arg		// replace later occurrences of %arg with %(this:exponent)
				// Q: what if base narrative?
		.variable	// replace later occurrence of variable with (this,variable)
				// Q: what if base narrative?
		%( )		// declaration: does nothing
		do .( expr )	// same as do ( this, (expr) )
				// Q: what if base narrative?

		=> Q: what if base narrative?

Input/Output interface
		do expression : "format" <	// input
		do > "format": expression	// output

	Where format can hold
	Input
		%_	read and instantiate the next recognizable identifier
			or relationship instances identifiers, discarding
			unquoted separators and #...\n sequences on the way.
		%c	read and instantiate the single character identifiers
			corresponding to the next byte read from stdin.
		%%	represents %
	Output
		%_	output the identifier(s) of the entities matching the
			expression passed as argument. All single character
			identifiers are output in quotes.
		%s	output the identifier(s) of the entities matching the
			expression passed as argument. Base instance identifiers
			are output without quotes. Relationship instances
			are backslashed unless they are grouped, in which case
			the group's opening '{' is backslashed.
		%%	represents %

	"format" can also be omitted, which defaults to "%_"

	Notes
	. Eventually we would like to support e.g.
		do > "format": { expression1, expression2, ... }
		do { expression1, expression2, ... }: "format" <
	  but for now only one expression argument is accepted.
	. Q: how to convert a ( list, * ) of single character identifier entities
	     into a standalone entity - aka. B% literal? could it be by piping output
	     into input? // Out of scope

Updates
	2020/12/02
		engineering complete - part I
		. completed /Base/Release/Examples/1_Schematize with test cases
		. updated design/specs/software-architecture.txt
	2020/11/20
		introduced on ~. meaning no event during last frame
		. needed for detecting deadlock and exiting schema threads
		introduced regex identifiers
		. needed to allow in *event:/[ \t]/ or /[A-Za-z0-9_]/
		. added ./Test/CN.rx
		created ../../Base/sequence.c
		. needed to allow do (( rule, id ), ( schema, { ... } ))
		  and eventually do > format: { arg1, arg2, ... }
	2020/11/13
		feature complete: single character identifiers
		. refactored bm_input and bm_output, e.g. input now
		  support relationship instance identifiers [UNTESTED]
		  as well as single character identifiers (in quotes)
		. patched Version-1.0 and TuringMachine example to
		  resp. recognize and use output format "%s"
		. introduced input formats "%_", "%c" and "%%", and
		  output formats "%_", "%s" and "%%"
		. added ./Test/CN.output
	2020/11/11
		added design/specs/test_hval.c validating output for
		single character identifier entities
		. completed bm_output and bm_register support
		. completed cn_out
	2020/11/10
		added ./Test/CN.yak - usage (main.c compiled with DEBUG):
			./B% ./Test/CN.yak > toto
			./B% toto > titi
			diff toto titi
		. diff should show no difference
		. Note: surely there is a way to write all three lines above as one
		  updated story_output and narrative_output
	2020/11/09
		feature complete: narrative instance registry
		. narrative instance definition [UNTESTED]
		. support .local declarations and do .( expression )
	2020/11/06
		feature change: using .arg instead of %arg in narrative instance name
		. updated design/yak.story, operation.c, util.c and expression.c
	2020/11/04
		feature change: made + and - tab logics relative
		feature complete: mark register
		. supporting in/on ?:expression and %? in narrative registry
		. added ./Test/CN.mark
	2020/11/03
		code refactoring
		. implemented changes according to ./design/specs/code-analysis.txt
		. added util.c and include/util.h
	2020/11/02
		code cleanup
		. simplified VerifyData - interface to bm_verify / bm_match
		. optimized bm_match() - using pivot from db_traverse() & db_feel()
		. changed init and exit from operation flags to CNDB entities
	2020/10/31
		added ./design/specs/code-analysis.txt
		added ./design/specs/read-narrative-states.txt
	2020/10/30
		added ./design/specs/db-traverse.txt
		simplification
		. implemented input preprocessor in narrative.c
	2020/10/29
		added ./design/specs/software-architecture.txt
		code cleanup
                . moved db_feel() out of database.c, into traversal.c
                . now use prefix bm_ for language-specific functions
	2020/10/28
		added ./design/task-list.txt
		feature complete: line continuation after \
			. also applies to format string
			. added ./Test/CN.backslash
		feature complete: standalone % entity
			. modified narrative.c expression.c
			. added ./Test/CN.percent
		added code base from ../Version-1.0
			. including bugfix strmatch()
			. supporting narrative statements ending with *
			  added Test/CN.star
	2020/10/27
		added ./design/specs/execution-model.txt
	2020/10/24
		added ./design/feature-list.txt
		added ./design/specs/single-character-entity.txt
	2020/10/23
		added ./design/specs/entity-list.txt

