
	We need to allow single character identifier entities, other than those already
	supported - i.e. with character in [A-Za-z0-9_]

	For this we must support single quotes, so that we have:

		identifier	internal representation

		'('		"(" = (char *) { '(', '\0' }
		')'		")"
		','		","
		'\n'		"\n"
		'\0'		"\0"
		'\t'		"\t"
		'\\'		"\\"
		'\xhh'		"\xhh"	where h is hexadecimal

	Note that,
	1. with the exception of '*' and '%', there should be no other way to create
	   entities whose name is a separator
	2. internal representation of e.g. * and '*' is the same

	TO BE MODIFIED:
	. input/output
	  the logic is that these deal with the entity identifiers (and not their internal
	  representations) by default.
	  input:
		current implementation: read identifiers by default, and skip separators.
		that means: by default, if I want a single character identifier entity to be
		read, I must provide it enclosed in single quotes. e.g.
			identifier' 'identifier : should produce 3 inputs
		TODO: support "%c" format, allowing to read characters (bytes) one at a time.
	  output:
		likewise: default with quotes, if needed, otherwise use "%c" format.
		TODO: support "%c" format, allowing to output characters (bytes) one at a time.
	. expression:
		TODO: handle single quote (everywhere) - e.g.
		in narrative.c
			. allow standalone %
			. allow '...' as term

	NOTE:
	. \identifier (internal "\\identifier") entities are reserved for special usage (TBD)
	. "identifier" (internal "\"identifier\"") are currently limited to input/output format
	. in yak.story: the '\0' entity we use to terminate schema could be any singleton, e.g.
	  we could have (a,(b,...(z,end))) - or could introduce B% own \0 (no quote)
	  to specify literals.
	. about literals: do ~(z,end) would destroy the whole literal - as well as all those
	  with the same ending. whereas do ~( *literal ) where ((*,literal),(a,...(z,end))
	  would only destroy the beginning (a,.) relationship instance.

