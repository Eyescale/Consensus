Consensus B% Version-1.1

	1. Execution Model
	2. Narrative Registry
	3. Change Summary

1. Execution Model

	The first fundamental change in this release, as compared to Version-1.0,
	is that whereas in v1.0 operations involved only a ( narrative, CNDB )
	association, we now have ( narrative, ( e, CNDB ) ) instances - where e
	would be NULL in case of the base narrative.

	To support this change, readNarrative must now return a list of
		narratives: { [ proto, root ] }
	where, e.g.
		"((schema,%position),(%flag,%frame))" is a narrative proto

	Then the system's main loop, similar to Version-1.0, does
		while ( cnOperate( narratives, db ) )
			cnUpdate(db);

	where cnOperate() implements
		if ( db_out( db ) ) return 0;
		for ( listItem *i=narratives; i!=NULL; i=i->next ) {
			Narrative *n = i->ptr;
			db_traverse( n->proto, db, operateCB, n );
		}
	with
		static int
		operateCB( CNInstance *e, CNDB *db, Narrative *n )
		{
			cn_operate( n, e, db );
			return CONTINUE;
		}

	Notes
	1. In the model above, we invoke db_traverse( expression=proto, ... ) assuming
	   that db_traverse treats the %arg in the expression as '.', whereas during
	   the narrative operation, these should be treated as registry variables.
	2. Furthermore, as of v1.1, db_traverse() actually expects (db,registry) argument,
	   as opposed to db only (see below)
	3. base narrative "init" and "exit" were previously operation flags. should now be
	   real CNDB entities.


2. Narrative Registry

	The second fundamental change is the introduction of register variables, most
	notably the variable "%?", but also the variables "this", "%arg", and ".identifier", 
	all pertaining to narrative instance operations.

	To support, cnOperate must now manage a narrative-instance-specific registry
	where the following narrative-instance specific pointers into the CNDB are held
		%?
		this	// e
		%arg	// from e and narrative->proto
		.locals	// created upon declaration

	and so that, whenever db_traverse() looks up an identifier, it must first search
	the current active registry, and then, only if that fails, search db.

	Note here that the usage of these variables should arguably not rely on the
	sequentiality of the implementation, but adhere to the principle that all operations
	registered during one frame - or Consensus execution cycle - execute simultaneously. 

	For instance, the (working) code

		on ?: expression
			do ~( expression:~%? )

	which guarantees the unicity of the instance characterized by expression, should
	actually be considered a hack, in that it would transpose into the non-working

		on expression
			do ~( expression:~expression )

	In other words, the usage of the registry variable %? should be considered the same
	way one would consider using a #define in C - that is: to simplify expression.


3. Change Summary

	1. readNarrative()
		. now returns a list of narratives:{ [ proto, root ] }
		  instead of previously returning [ root, init ]

	2. CNDB "init" and "exit" flags now real CNDB entities
		. (nil,init) is created upon CNDB instantiation
		. (nil,nil) is created by db_exit()

	3. cnOperate
		. must now take ( narrative, ( e, CNDB ) ) - where e NULL for
		  base narrative - instead of previously ( narrative, CNDB )
		. cnOperate( ., NULL, db ) to check and return exit condition
		. must push narrative-instance-specific registry upon entry,
		  and pop registry before return

	4. bm_traverse
		. must now take ( db, registry ) instead of previously only db
		. must lookup identifier first into registry, and then, only if
		  that fails, into db

	5. The key other bm_ functions to be modified are therefore those invoking
		registryLookup( db->index, identifier )
	   These are:
		db_register
		db_lookup
		db_instantiate
		db_identifier

