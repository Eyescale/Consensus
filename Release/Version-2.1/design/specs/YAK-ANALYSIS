
Scheme
        ((Rule,base), ( Schema, {
                (:%term:) } ))
        ((Rule,term), ( Schema, {
                (:A:)
                (:%s%term%s:) } ))
        ((Rule,s), ( Schema, {
                (::)
                (:%s :) } ))
Input
	\ A\n

===========================================================================
Initialization
===========================================================================

	. launch [A] base rule
	  => one schema: %term\0	<<<< [1] feeding %base rule A
		         ^
		. launch [B] term rule's non-null schemas
		  => schema: A\0		<<<< [2] feeding %term rule B
			     ^
		  => schema: %s%term%s\0	<<<< [3] feeding %term rule B
			     ^
			. FORK on null-schema
			  => successor schema: %s%term%s\0	<<<< [4] feeding %term rule B
						 ^
				. %term already launched
				  => [4] pending on B [and feeding B] is CYCLIC

			. launch [C] s rule's non-null schemas
			  => one schema: %s\ \0 			<<<< [5] feeding %s rule C
					 ^
				. FORK on null-schema
				  => successor schema: %s\ \0		<<<< [6] feeding %s rule C
							 ^
				. %s already launched
				  => [5] pending on C [and feeding C] is CYCLIC

    Status after initialization: 6 schema threads

	1.	%term\0		// feeding %base, pending on %term
		^
	2.		A\0		// launched by [1], feeding %term, pending on event
			^
	3.		%s%term%s\0	// launched by [1], feeding %term, pending on %s
			^
	4.			%s%term%s\0	// FORKED from [3], feeding %term, pending on %term - CYCLIC
				  ^
	5.			%s\ \0		// launched by [3], feeding %s, pending on %s - CYCLIC
				^
	6.				%s\ \0		// FORKED from [5], feeding %s, pending on event
					  ^

===========================================================================
First input: ' '
===========================================================================

	=> [2] fails, [6] completes
		=> [5] launches new successor 7
		=> [3] launches new successor 8
			launches new %term, etc.


	1.	%term\0		// feeding %base, pending on %term
		^
	2. FAIL		A\0		// launched by [1], feeding %term, pending on event
			^
	3.		%s%term%s\0	// launched by [1], feeding %term, pending on %s
			^
	4.			%s%term%s\0	// FORKED from [3], feeding %term, pending on %term - CYCLIC
				  ^
	5. 			%s\ \0		// launched by [3] feeding %s, pending on %s - CYCLIC
				^
	6. PASS				%s\ \0		// FORKED from [5], feeding %s, pending on event
					  ^
    ----------
	7.				%s\ \0		// launched by [5], feeding %s
					  ^
	8.			%s%term%s\0	// launched by [3], feeding %term, pending on NEW %term
				  ^
	9. 				A\0		// launched by [8], feeding new %term
					^
	10.				%s%term%s\0	// launched by [8], feeding new %term, pending on NEW %s
					^
	11.					%s%term%s\0	// FORKED from [10], feeding new %term - CYCLIC
						  ^
	12.					%s\ \0		// launched by [10], feeding new %s - CYCLIC
						^
	13.						%s\ \0		// FORKED from [12], feeding new %s, pending on event
							  ^

	=> at this point:
		%term does have a feeder starting at %term's starting frame == [3]
			but now [3] has two successors [4] and [8]
		%s does have a feeder starting at %s's starting frame == [5]

===========================================================================
Second input: 'A'
===========================================================================

	=> [7] and [13] fail, [9] completes, feeding new %term
		=> [8] launches new successor [14]
			launches new %s, etc.

	1.	%term\0			// feeding %base, pending on %term
		^
	3.		%s%term%s\0	// feeding %term, pending on %s <<======== DONE
			^
	4.			%s%term%s\0	// FORKED from [3], feeding %term, pending on %term - CYCLIC
				  ^
	5. 			%s\ \0		// launched by [3], feeding %s, pending on %s - CYCLIC	<<======== EXIT [7]
				^
	6. DONE				%s\ \0		// FORKED from [5], feeding %s, pending on event
					    ^
    ----------
	7. FAIL				%s\ \0	// launched by [5], feeding %s
					  ^
	8.			%s%term%s\0	// launched by [3], feeding %term, pending on new %term
				  ^
	9. PASS				A\0	// launched by [8], feeding new %term
					^
	10.				%s%term%s\0	// launched by [8], feeding new %term, pending on new %s <<======== HAS SUCCESSOR
					^
	11.					%s%term%s\0	// FORKED from [10], feeding new %term - CYCLIC
						  ^
	12.	 				%s\ \0		// launched by [10], feeding new %s - CYCLIC <<======== EXIT [13]
						^
	13. FAIL					%s\ \0		// FORKED from [12], feeding new %s, pending on event
							  ^
    ----------
	14.				%s%term%s\0	// launched by [8], feeding %term, pending on new-new %s
			      		 ^
	15. TAKE				%s%term%s\0	// FORKED from [14], feeding %term <<< [1] and [4] subscribing
							 ^
	16.				%s%term%s\0	// launched by [4], feeding %term, pending on new-new %s
					       ^
	17. TAKE				%s%term%s\0	// FORKED from [16], feeding %term <<< [1] and [4] subscribing
							 ^
	18.					%s\ \0		// launched by [16], feeding new-new %s - CYCLIC
						^
	19.						%s\ \0		// FORKED from [18], feeding new-new %s, pending on event
					 		  ^
	20. TAKE	%term\0		// launched by [1], [successor], feeding %base <<< ONE pass COMPLETE
			     ^

===========================================================================
Third input: '\n'
===========================================================================

	=> [19] fails

	1.	%term\0			// feeding %base, pending on %term
		^
	3. DONE		%s%term%s\0	// feeding %term, pending on %s
			^
	4.		%s%term%s\0	// FORKED from [3], feeding %term, pending on %term - CYCLIC
			  ^
	6. DONE				%s\ \0	// FORKED from [5], feeding %s
					    ^
    ----------
	8.		%s%term%s\0	// launched by [3], feeding %term, pending on new %term
			  ^
	9. DONE			A\0	// launched by [8], feeding new %term
				 ^
	10. 			%s%term%s\0	// launched by [8], feeding new %term, pending on new %s - HAS SUCCESSOR
				^
	11.				%s%term%s\0	// FORKED from [10], feeding new %term - CYCLIC
					  ^
    ----------
	14.			%s%term%s\0	// launched by [8], feeding %term, pending on new-new %s <<======== EXIT
				       ^
	15. DONE			%s%term%s\0	// FORKED from [14], feeding %term <<< [1] and [4] subscribing
				 		 ^
	16. 			%s%term%s\0	// launched by [4], feeding %term, pending on new-new %s << HAS SUCCESSOR
				       ^
	17. DONE			%s%term%s\0	// FORKED from [16], feeding %term <<< [1] and [4] subscribing
						 ^
	18. 				%s\ \0		// launched by [16], feeding new-new %s - CYCLIC <<======== EXIT [19]
					^
	19. FAIL				%s\ \0		// FORKED from [18], feeding new-new %s, pending on event
				 		  ^
	20. DONE	%term\0		// launched by [1], feeding %base <<< ONE pass COMPLETE
			     ^

	Notes:
		. [10] and [16] cannot exit on their own, since they have successors, but
		  they will be EXITED upon new %s's and new-new %s's last feeder exit
		. This will then make new %term COMPLETE, causing [11] to exit as CYCLIC

===========================================================================
Output
===========================================================================

	=> After all the smoke clears, we SHOULD have:

	1.	%term\0			// feeding %base, pending on %term
		^
	3. DONE		%s%term%s\0	// feeding %term, pending on %s
			^
	4.		%s%term%s\0	// FORKED from [3], feeding %term - CYCLIC <<======== EXIT: but that's [6]'s subscriber's successor !!
			  ^
	6. DONE				%s\ \0	// FORKED from [5][GONE], feeding %s
					    ^
    ----------
	8.		%s%term%s\0	// launched by [3], feeding %term, pending on new %term
			  ^
	9. DONE			A\0	// launched by [8], feeding new %term
				 ^
    ----------
	15. DONE			%s%term%s\0	// FORKED from [14], feeding %term <<< [1] and [4] subscribing
				 		 ^
	17. DONE			%s%term%s\0	// FORKED from [16], feeding %term <<< [1] and [4] subscribing
						 ^
	20. DONE	%term\0		// launched by [1], feeding %base <<< ONE pass COMPLETE
			     ^


--------------------------------------------------
DEBUG: IF FIRST AND FOURTH LINES BOTH ENABLED => yak.story.NEW (Schemes e.g. debug) crashes 
--------------------------------------------------
#ifdef NEW
		// s has rule with event unconsumed starting this frame - pushing
		else in ?: ((.,(']',*f)), %(?:(.,(']',*f)):~*r,*s)): ~%(?,(']',*f))
#else
		else in ( ?:(.,(']',*f)):~*r, *s )
#endif
#ifdef NEW
			=> if first line enabled: should read
			do : s : %?
			do : r : %(%?:(.,?))
#else
			// set s to the feeder starting & not finishing at r's starting frame
			in ?: %((.,%(%?:(.,?))),%?): ~%(?,%(%?:(.,?)))
				do : s : %?
				do : r : %(%?:(.,?))
#endif

--------------------------------------------------
BUG trace
--------------------------------------------------


../../B% -f Schemes/debug yak.story.NEW 
========== instantiating rule: base	(']',(record,*))
========== instantiating rule: term	(']',(record,*))
========== instantiating rule: s	(']',(record,*))
 A
---------------------------------------- on ' '
========== instantiating rule: term	(']',((record,*),' '))
========== instantiating rule: s	(']',((record,*),' '))
---------------------------------------- on A
EXIT 0: rule ((rule,s),(']',((record,*),' '))) - no feeder
EXIT 0: schema (((schema,((%,s),(' ','\0'))),(']',((record,*),' '))),((rule,s),(']',((record,*),' ')))) - lost rule
EXIT 2: schema (((schema,((%,s),((%,term),((%,s),'\0')))),(']',((record,*),' '))),((rule,term),(']',((record,*),' ')))) - feeder rule failed
BINGO!!!
BINGO!!!
========== instantiating rule: s	(']',(((record,*),' '),A))
---------------------------------------- on '\n'
EXIT 0: rule ((rule,s),(']',(((record,*),' '),A))) - no feeder
EXIT 0: schema (((schema,((%,s),(' ','\0'))),(']',(((record,*),' '),A))),((rule,s),(']',(((record,*),' '),A)))) - lost rule
EXIT 2: schema (((schema,((%,s),'\0')),(']',(((record,*),' '),A))),((rule,term),(']',((record,*),' ')))) - feeder rule failed
EXIT 2: schema (((schema,((%,s),'\0')),(']',(((record,*),' '),A))),((rule,term),(']',(record,*)))) - feeder rule failed
EXIT 3: schema (((schema,((%,term),((%,s),'\0'))),(']',((record,*),' '))),((rule,term),(']',(record,*)))) - lost successor	<<<<< that's the problem
EXIT 4: (((schema,'\0'),(']',(((record,*),' '),A))),((rule,term),(']',((record,*),' ')))) subscriber has no successor
EXIT 3: schema (((schema,((%,s),((%,term),((%,s),'\0')))),(']',(record,*))),((rule,term),(']',(record,*)))) - lost successor
EXIT 4: (((schema,(' ','\0')),(']',(record,*))),((rule,s),(']',(record,*)))) subscriber has no successor
EXIT 1: rule ((rule,term),(']',((record,*),' '))) - no subscriber
EXIT 0: rule ((rule,s),(']',(record,*))) - no feeder
EXIT 0: schema (((schema,(' ','\0')),(']',(record,*))),((rule,s),(']',(record,*)))) - lost rule
- OUT -
---------- status rule: base	(']',(record,*))
	feeders: { (((schema,'\0'),(']',(((record,*),' '),A))),((rule,base),(']',(record,*)))), (((schema,((%,term),'\0')),(']',(record,*))),((rule,base),(']',(record,*)))) }
	subscribers: 
---------- status rule: term	(']',(record,*))
	feeders: (((schema,'\0'),(']',(((record,*),' '),A))),((rule,term),(']',(record,*))))
	subscribers: (((schema,((%,term),'\0')),(']',(record,*))),((rule,base),(']',(record,*))))
- ERR -
no feeder found for rule 'term' at frame (record,*)
CHECK other feeders: ((schema,'\0'),(']',(((record,*),' '),A)))

