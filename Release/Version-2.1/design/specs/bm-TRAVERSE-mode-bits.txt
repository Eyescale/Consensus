Complete table of mode vs. traverse_data.done flags

	The tags indicate traversals where (:expression) will be interpreted as LITERAL
	=> TODO: restore bm_void() / void_traversal: mode INFORMED|LITERAL

X		instantiate_traversal	=> traverse_data.done = INFORMED		[LITERAL]
X		deternarize_traversal	=> traverse_data.done = INFORMED|TERNARY
X		query_traversal		=> traverse_data.done = 0			[STATE]
N/A		eenov_traversal		=> traverse_data.done = 0			[STATE]
		locate_pivot_traversal	=> traverse_data.done = 0			[STATE]
N/A		eeno_feel_traversal	=> traverse_data.done = 0			[STATE]
X		query_traversal		=> traverse_data.done = 0			[STATE]
X		locate_mark_traversal	=> traverse_data.done = SUB_EXPR		[STATE]
X		locate_emark_traversal	=> traverse_data.done = SUB_EXPR		[STATE]
N/A		deparameterize_traversal => traverse_data.done = INFORMED|FILTERED	[STATE]
N/A		actualize_traversal	=> traverse_data.done = FILTERED		[STATE]

		=> basically ONLY instantiation/void are cases where I have literals
		but deternarize depends on who is calling! => I need an extra flag
		for bm_traverse() to know whether it should skip or enter literals.
		=> I can use LITERAL, which in case of DO is passed to deternarize()
		and otherwise not.

	Mode description
		INFORMED	=> on '(' p_single() is not called by bm_traverse()
		LITERAL		=> on '(:' invokes p_prune( PRUNE_LITERAL, p )
		SUB_EXPR	=> 1. passes ellipsis as wildcard
				   2. overrides LITERAL mode setting
		FILTERED	=> passes ellipsis as wildcard
		TERNARY		=> 1. on '<' continues vs. terminating traversal
			 	   2. skips ellipsis
[New]		CLEAN		=> does not invoke p_filtered() in CB_TermCB

	Note about parser.c
		COMPOUND flag prevents expression from being FILTERED and literals
		from being used as ternary guards

Active / inactive / contrary:

		on ~.		always fails - needed for ternary

		on .		means active
		on ~.: .	means inactive / quiet
		on ~( . )	means any released
		on ~.:~( . ) 	means none released

