
Mar 19, 2017
DONE	. introduced "literal" value account in order to test filter variables
		: variable : %[ expression ].$( literal )
	  translates entities into special expressions (see below Mar 15, 2017)
	  The variable type is then LiteralVariable (vs. ExpressionVariable)
DONE	. added "test/filter" to test operations on literals / filter variables
DONE	. modified "test/monitor" to instantiate new entities from released ones
DONE	. filter variables completed (see below explanations from Mar 15, 2017)
DONE		. in expression_solve.c: must re-extract the results after resolve()
DONE		. take_all: does not take filter into account yet
DONE		. variable assignment: does not take filter into account yet
DONE		. test with loops: does not take filter into account yet
DONE		. more - see test/filter
DONE		  need to test : .-is->[ ?-is->toto ]

	  TODO next:
		. add support for sub-queries, i.e.
			. allow %[ ] as TERM in expressions (allowing several '?' )
			  This also allows to execute ?: %[ a-is->b < %event ]
			. Note: will have to disable test_as_sub when evaluating sub-queries in InstantiateMode
		. narrative init and exit notifications
		. narrative deactivation
		. complete documentation as-is
		. Release v1.0


Mar 15, 2017
DONE	. add support for filter variables, e.g.
		: variable2 : expression < %variable1	// extract relevant expression terms from variable1

	  variable2 then takes the type of variable1 - i.e. either ExpressionVariable or EntityVariable

	  This allows
		1. to process 'release' event notifications - as the event variable cannot hold entities
		   which no longer exist. The 'release' notification event variable holds expressions,
		   which we may want to process to perform other DB changes (see example 1. below)
		2. to process future event notifications or requests from other sources, which will
		   necessarily be passed as expressions - vs. local memory addresses (see example 2.)

	  EXAMPLES:
		1. on event: .-is->b !~ do
			?: ?-is->b < %event
				!! %?-is->c	// re-attach to c what was attached to b
				/
			/.
		2. on event < source >: .-is->b !~ do
			?: [ ?: %event ]<-has-%source	// parse local DB for entities matching event
				!~ %?			// maps changes from source to local image
				/
			/.

	  NOTES:
		. if event is an Expression variable:

			?%: ?-is->b < %event		will pass if event has a TERM matching expression
			?%: %[ ?-is->b < %event ]	will pass if DB has an ENTITY matching such TERM
			?: ?-is->b < %event		will loop over the TERMS ( = sub-expressions )
			?: %[ ?-is->b < %event ]	will loop over the ENTITIES

		. otherwise, if event is an Entity variable, then:

			?-is->toto < %event		returns the same as: ?-is->toto : %event
			?-is->toto : titi < %event	returns the same as: [ ?-is->toto: titi ] : %event

DONE	. clean up interface with input.c
		. rename context->control.execute into context->input.instructions
		. change push_input() to set context->input.instructions
		. rename BlockStringInput into InstructionBlock
		. rename EscapeStringInput into LastInstruction
		. set record.level from push_input() upon InstructionBlock
DONE	. fix !! [ .-is->toto ]-is->tata 	=> should NOT work
DONE	. fix !! () and !! titi-is->toto()	=> should NOT work

Mar 13, 2017
DONE	. change syntax for conditional execution
DONE	. tracked entity released log events (cf test/monitor)
DONE	. replace expression with expression list in variables everywhere
DONE	. Fix bug: monitor event does not output '.'

Mar 9, 2017
DONE	publish code on github
DONE	: variable : .-.->? : [ .-is->toto ]	>>> does not collapse??? should!!
DONE	introduce flag	sub[ count ].result.resolve in expression_solve.c
DONE	Fix:
DONE		consensus$ : titi : [ ?..: . : %[ ??. ] ]
DONE		consensus$ >:%titi
DONE		?..: %[ ??. ]	>>> should be ?..: . : %[ ??. ]
DONE	. Fix bugs below:
DONE		>:%[ ?.. : %? ] returns whole instance (vs. source)
DONE		>:%[ ?.. : ... : %? ] yields different results	(yields the right results!)
DONE	. fix	>:%[ *. ] or >:%[ _. ]	(crash)
DONE	. fix	!! %titi	( fails )
DONE	. Code restructuring
DONE	. Narrative
DONE		. check overwrite beforehand
DONE	. collapse
DONE		. take ~ flag into account
DONE	. output shorty
DONE	. Expression:
DONE		. flags in Parser and in Output
DONE		. support '*' and '_' and '~' in expression
DONE		. complete solve_expression - take_sub_result: do all the comparisons
DONE		. '~' execution / testing
DONE		. special case : ~.
DONE		. debug freeExpression()
DONE		. generalize shorty...
DONE	. ?~ ... (start directly with if not)
DONE	. IMPLEMENT READ_ACTION from narrative.c
DONE	. >:%narrative()
DONE	. : identifier : %[ expression ]
DONE	. IMPLEMENT PUSH_ACTION from narrative.c
DONE	. read narrative event
DONE	. narrative variables
DONE	. ADD RULE: exit can only be performed during narrative execution, and not in instruction block
DONE	. rewrite frame traversing narrative's internal structure
DONE	. narrative removal at init
DONE	. read narrative from file - done ":<%( "cat file" )"
DONE	. narrative output
DONE		. output actions using command.c
DONE	. ADD RULE: No more ON after ON-IN
DONE	. ADD RULE: init can not be followed by any other event (but can be preceded and/or followed by conditions...)
DONE	. ADD RULE: no "on init" after then
DONE	. narrative cleanup at exit - or right after popping...
DONE	. allow actions without event - write correct pipeline


