
Mar 24, 2016
DONE    . return proper values from expression commands: fine as-is, except release command should just return nothing
	  Note: consequently in the future variables should be assignable to null - that is: reset / not set
		This requires to change the current behaviour upon error (e.g. variable not found).
DONE    . introduced reset operations - untested
DONE            :~              // reset variable stack
DONE            :~ identifier   // reset variable (i.e. remove from variable stack)

        TODO next:
                . complete documentation of software as-is
                        . document '~.' as variable value
                        . document how to deal with race conditions
                          without proper design / agreement upfront, things do break
                        . document difference between command expression's return values
                          and narrative events (or: how to handle actual changes)
                . Release v1.0


Mar 23, 2016
DONE	. deprecated new 'filter' syntax - reverted to syntax already in place, e.g.
		?: source-medium->target: %filter	NEW
	  instead of
		?: source-medium->target < %filter	DEPRECATED
	  Then
		?: %[ source-medium->target: %filter ]
		will actually parse the entities - if there are - corresponding to literal

DONE	. implemented ?: %[ expression ] to translate literals into entities, when instance is a literal variable
DONE	. implemented ? %: %[ expression ] to test the same
DONE	. implemented ?~ %: %[ expression ] to test the same
DONE	. updated test/filter to new syntax
DONE	. allowed to assign narrative & va to literals (which are then translated into local entities)
DONE	. changed 'this' symbol from '%' to '!' - as we may want to use %% in the future, as foreseen by SEI
DONE	. updated test/va in order to test existing narrative assignment to variable
DONE	. fixed bugs e.g. #ifndef MEMOPT instead of #ifdef MEMOPT in expression_solve


	TODO next:
	. complete documentation as-is
	. change return value from expression commands to return entities actually affected by the command
	  : variable : !! a-is->b	should return only and all entities newly instantiated
	  : variable : !~ a-is->b	should report only and all entities newly released
	  : variable : !* a-is->b	should return only and all entities newly activated
	  : variable : !_ a-is->b	should return only and all entities newly deactivated
	. Release v1.0

	Notes:
	. support for sub-queries (ie. support %[ ] as TERM in expression) de-scoped from this release.

Mar 20, 2017
DONE	. deprecated all narrative event notifications (e.g. init, exit)
		. these can be notified using normal entities in the corresponding actions
DONE	. modified test/narrative to remove narrative event
DONE	. implemented narrative deactivation command
DONE		. test monitor deactivation
DONE		. modify test/monitor to deactivate monitor() at the end of test
DONE	. implemented narrative release command
DONE	. modified test/full to test filter variables after test/monitor
Mar 19, 2017
DONE	. introduced "literal" value account in order to test filter variables
		: variable : %[ expression ].$( literal )
	  translates entities into special expressions (see below Mar 15, 2017)
	  The variable type is then LiteralVariable (vs. ExpressionVariable)
DONE	. added "test/filter" to test operations on literals / filter variables
DONE	. modified "test/monitor" to instantiate new entities from released ones
DONE	. filter variables completed (see below explanations from Mar 15, 2017)
DONE		. in expression_solve.c: must re-extract the results after resolve()
DONE		. take_all: does not take filter into account yet
DONE		. variable assignment: does not take filter into account yet
DONE		. test with loops: does not take filter into account yet
DONE		. more - see test/filter
DONE		  need to test : .-is->[ ?-is->toto ]

Mar 15, 2017
DONE	. add support for filter variables, e.g.
		: variable2 : expression < %variable1	// extract relevant expression terms from variable1

	  variable2 then takes the type of variable1 - i.e. either ExpressionVariable or EntityVariable

	  This allows
		1. to process 'release' event notifications - as the event variable cannot hold entities
		   which no longer exist. The 'release' notification event variable holds expressions,
		   which we may want to process to perform other DB changes (see example 1. below)
		2. to process future event notifications or requests from other sources, which will
		   necessarily be passed as expressions - vs. local memory addresses (see example 2.)

	  EXAMPLES:
		1. on event: .-is->b !~ do
			?: ?-is->b < %event
				!! %?-is->c	// re-attach to c what was attached to b
				/
			/.
		2. on event < source >: .-is->b !~ do
			?: [ ?: %event ]<-has-%source	// parse local DB for entities matching event
				!~ %?			// maps changes from source to local image
				/
			/.

	  NOTES:
		. if event is an Expression variable:

			?%: ?-is->b < %event		will pass if event has a TERM matching expression
			?%: %[ ?-is->b < %event ]	will pass if DB has an ENTITY matching such TERM
			?: ?-is->b < %event		will loop over the TERMS ( = sub-expressions )
			?: %[ ?-is->b < %event ]	will loop over the ENTITIES

		. otherwise, if event is an Entity variable, then:

			?-is->toto < %event		returns the same as: ?-is->toto : %event
			?-is->toto : titi < %event	returns the same as: [ ?-is->toto: titi ] : %event

DONE	. clean up interface with input.c
		. rename context->control.execute into context->input.instructions
		. change push_input() to set context->input.instructions
		. rename BlockStringInput into InstructionBlock
		. rename EscapeStringInput into LastInstruction
		. set record.level from push_input() upon InstructionBlock
DONE	. fix !! [ .-is->toto ]-is->tata 	=> should NOT work
DONE	. fix !! () and !! titi-is->toto()	=> should NOT work

Mar 13, 2017
DONE	. change syntax for conditional execution
DONE	. tracked entity released log events (cf test/monitor)
DONE	. replace expression with expression list in variables everywhere
DONE	. Fix bug: monitor event does not output '.'

Mar 9, 2017
DONE	publish code on github
DONE	: variable : .-.->? : [ .-is->toto ]	>>> does not collapse??? should!!
DONE	introduce flag	sub[ count ].result.resolve in expression_solve.c
DONE	Fix:
DONE		consensus$ : titi : [ ?..: . : %[ ??. ] ]
DONE		consensus$ >:%titi
DONE		?..: %[ ??. ]	>>> should be ?..: . : %[ ??. ]
DONE	. Fix bugs below:
DONE		>:%[ ?.. : %? ] returns whole instance (vs. source)
DONE		>:%[ ?.. : ... : %? ] yields different results	(yields the right results!)
DONE	. fix	>:%[ *. ] or >:%[ _. ]	(crash)
DONE	. fix	!! %titi	( fails )
DONE	. Code restructuring
DONE	. Narrative
DONE		. check overwrite beforehand
DONE	. collapse
DONE		. take ~ flag into account
DONE	. output shorty
DONE	. Expression:
DONE		. flags in Parser and in Output
DONE		. support '*' and '_' and '~' in expression
DONE		. complete solve_expression - take_sub_result: do all the comparisons
DONE		. '~' execution / testing
DONE		. special case : ~.
DONE		. debug freeExpression()
DONE		. generalize shorty...
DONE	. ?~ ... (start directly with if not)
DONE	. IMPLEMENT READ_ACTION from narrative.c
DONE	. >:%narrative()
DONE	. : identifier : %[ expression ]
DONE	. IMPLEMENT PUSH_ACTION from narrative.c
DONE	. read narrative event
DONE	. narrative variables
DONE	. ADD RULE: exit can only be performed during narrative execution, and not in instruction block
DONE	. rewrite frame traversing narrative's internal structure
DONE	. narrative removal at init
DONE	. read narrative from file - done ":<%( "cat file" )"
DONE	. narrative output
DONE		. output actions using command.c
DONE	. ADD RULE: No more ON after ON-IN
DONE	. ADD RULE: init can not be followed by any other event (but can be preceded and/or followed by conditions...)
DONE	. ADD RULE: no "on init" after then
DONE	. narrative cleanup at exit - or right after popping...
DONE	. allow actions without event - write correct pipeline


